// Licensed to the Qtyi under one or more agreements.
// The Qtyi licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using Microsoft.CodeAnalysis;
using Roslyn.Utilities;

namespace Qtyi.CodeAnalysis;

/// <summary>
/// Specifies output assembly kinds generated by compiler.
/// </summary>
public enum OutputKind
{
    /// <summary>
    /// An .exe with an entry point and a console.
    /// </summary>
    ConsoleApplication = Microsoft.CodeAnalysis.OutputKind.ConsoleApplication,

    /// <summary>
    /// An .exe with an entry point but no console.
    /// </summary>
    WindowsApplication = Microsoft.CodeAnalysis.OutputKind.WindowsApplication,

    /// <summary>
    /// A .dll file.
    /// </summary>
    DynamicallyLinkedLibrary = Microsoft.CodeAnalysis.OutputKind.DynamicallyLinkedLibrary,

    /// <summary>
    /// A .netmodule file.
    /// </summary>
    NetModule = Microsoft.CodeAnalysis.OutputKind.NetModule,

    /// <summary>
    /// A .winmdobj file.
    /// </summary>
    WindowsRuntimeMetadata = Microsoft.CodeAnalysis.OutputKind.WindowsRuntimeMetadata,

    /// <summary>
    /// An .exe that can run in an app container.
    /// <para>
    /// Equivalent to a WindowsApplication, but with an extra bit set in the Portable Executable file
    /// so that the application can only be run in an app container.
    /// Also known as a "Windows Store app".
    /// </para>
    /// </summary>
    WindowsRuntimeApplication = Microsoft.CodeAnalysis.OutputKind.WindowsRuntimeApplication,

    LuaIntermediateBytecodes = 6,
}

internal static partial class EnumBounds
{
    internal static bool IsValid(this OutputKind value) => value is >= OutputKind.ConsoleApplication and <= OutputKind.LuaIntermediateBytecodes;

    internal static string GetDefaultExtension(this OutputKind kind) => kind switch
    {
        OutputKind.ConsoleApplication or
        OutputKind.WindowsApplication or
        OutputKind.WindowsRuntimeApplication => ".exe",

        OutputKind.DynamicallyLinkedLibrary => ".dll",

        OutputKind.NetModule => ".netmodule",

        OutputKind.WindowsRuntimeMetadata => ".winmdobj",

        OutputKind.LuaIntermediateBytecodes => ".out",

        _ => throw ExceptionUtilities.UnexpectedValue(kind),
    };

    internal static bool IsApplication(this OutputKind kind) => kind switch
    {
        OutputKind.ConsoleApplication or
        OutputKind.WindowsApplication or
        OutputKind.WindowsRuntimeApplication => true,

        OutputKind.DynamicallyLinkedLibrary or
        OutputKind.NetModule or
        OutputKind.WindowsRuntimeMetadata or
        OutputKind.LuaIntermediateBytecodes => false,

        _ => false,
    };

    internal static bool IsNetModule(this OutputKind kind) => kind == OutputKind.NetModule;

    internal static bool IsWindowsRuntime(this OutputKind kind) => kind == OutputKind.WindowsRuntimeMetadata;

    internal static bool IsLuaIntermediateBytecodes(this OutputKind kind) => kind == OutputKind.LuaIntermediateBytecodes;
}
