<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CompilationMoonScript" xml:space="preserve">
    <value>Compilation (MoonScript):</value>
  </data>
  <data name="ERR_AliasMissingFile" xml:space="preserve">
    <value>Invalid reference alias option: '{0}=' -- missing filename.</value>
  </data>
  <data name="ERR_AssemblyMatchBadVersion" xml:space="preserve">
    <value>Assembly '{0}' with identity '{1}' uses '{2}' which has a higher version than referenced assembly '{3}' with identity '{4}'</value>
  </data>
  <data name="ERR_AssemblyNameOnNonModule" xml:space="preserve">
    <value>The /moduleassemblyname option may only be specified when building a target type of 'module'.</value>
  </data>
  <data name="ERR_BadBaseNumber" xml:space="preserve">
    <value>Invalid image base number '{0}'.</value>
  </data>
  <data name="ERR_BadCompatMode" xml:space="preserve">
    <value>Invalid option '{0}' for /langversion. Use '/langversion:?' to list supported values.</value>
  </data>
  <data name="ERR_BadDirectivePlacement" xml:space="preserve">
    <value>Preprocessor directives must appear as the first non-whitespace character on a line.</value>
  </data>
  <data name="ERR_BadExternAlias" xml:space="preserve">
    <value>The extern alias '{0}' was not specified in a /reference option.</value>
  </data>
  <data name="ERR_BadExternIdentifier" xml:space="preserve">
    <value>Invalid extern alias for '/reference'; '{0}' is not a valid identifier.</value>
  </data>
  <data name="ERR_BadPlatformType" xml:space="preserve">
    <value>Invalid option '{0}' for /platform; must be anycpu, x86, Itanium, arm, arm64 or x64.</value>
  </data>
  <data name="ERR_BadSwitch" xml:space="preserve">
    <value>Unrecognized option: '{0}'.</value>
  </data>
  <data name="ERR_CannotEmbedWithoutPdb" xml:space="preserve">
    <value>/embed switch is only supported when emitting a PDB.</value>
  </data>
  <data name="ERR_CantReadConfigFile" xml:space="preserve">
    <value>Cannot read config file '{0}' -- '{1}'</value>
  </data>
  <data name="ERR_CycleInTypeForwarder" xml:space="preserve">
    <value>The type forwarder for type '{0}' in assembly '{1}' causes a cycle.</value>
  </data>
  <data name="ERR_DuplicateTypeForwarder" xml:space="preserve">
    <value>'{0}' duplicate TypeForwardedToAttribute.</value>
  </data>
  <data name="ERR_InsufficientStack" xml:space="preserve">
    <value>An expression is too long or complex to compile.</value>
  </data>
  <data name="ERR_LanguageVersionCannotHaveLeadingZeroes" xml:space="preserve">
    <value>Specified language version '{0}' cannot have leading zeroes.</value>
  </data>
  <data name="ERR_NoFileSpec" xml:space="preserve">
    <value>Missing file specification for '{0}' option.</value>
  </data>
  <data name="ERR_NoNetModuleOutputWhenRefOutOrRefOnly" xml:space="preserve">
    <value>Cannot compile net modules when using /refout or /refonly.</value>
  </data>
  <data name="ERR_NoOutputDirectory" xml:space="preserve">
    <value>Output directory could not be determined.</value>
  </data>
  <data name="ERR_NoRefOutWhenRefOnly" xml:space="preserve">
    <value>Do not use refout when using refonly.</value>
  </data>
  <data name="ERR_NoSourceFile" xml:space="preserve">
    <value>Source file '{0}' could not be opened -- {1}.</value>
  </data>
  <data name="ERR_OneAliasPerReference" xml:space="preserve">
    <value>A /reference option that declares an extern alias can only have one filename. To specify multiple aliases or filenames, use multiple /reference options.</value>
  </data>
  <data name="ERR_OutputNeedsName" xml:space="preserve">
    <value>Outputs without source must have the /out option specified.</value>
  </data>
  <data name="ERR_SourceLinkRequiresPdb" xml:space="preserve">
    <value>/sourcelink switch is only supported when emitting PDB.</value>
  </data>
  <data name="ERR_SwitchNeedsArg" xml:space="preserve">
    <value>Command-line syntax error: Missing '{0}' for '{1}' option.</value>
  </data>
  <data name="ERR_TypeForwardedToMultipleAssemblies" xml:space="preserve">
    <value>Module '{0}' in assembly '{1}' is forwarding the type '{2}' to multiple assemblies: '{3}' and '{4}'.</value>
  </data>
  <data name="FTL_InvalidInputFileName" xml:space="preserve">
    <value>File name '{0}' is empty, contains invalid characters, has a drive specification without an absolute path, or is too long.</value>
  </data>
  <data name="FTL_InvalidTarget" xml:space="preserve">
    <value>Invalid target type for /target: must specify 'exe', 'winexe', 'library', 'netmodule', or 'intermediate'.</value>
  </data>
  <data name="IDS_DirectoryDoesNotExist" xml:space="preserve">
    <value>directory does not exist</value>
  </data>
  <data name="IDS_DirectoryHasInvalidPath" xml:space="preserve">
    <value>path is too long or invalid</value>
  </data>
  <data name="IDS_LangVersions" xml:space="preserve">
    <value>Supported language versions:</value>
  </data>
  <data name="IDS_LIB_ENV" xml:space="preserve">
    <value>LIB environment variable</value>
  </data>
  <data name="IDS_LIB_OPTION" xml:space="preserve">
    <value>/LIB option</value>
  </data>
  <data name="IDS_LogoLine1" xml:space="preserve">
    <value>{0} version {1}</value>
  </data>
  <data name="IDS_LogoLine2" xml:space="preserve">
    <value>Copyright (C) Qtyi. All rights reserved.</value>
  </data>
  <data name="IDS_MOONCHelp" xml:space="preserve">
    <value>No help message found.</value>
  </data>
  <data name="IDS_Number" xml:space="preserve">
    <value>&lt;number&gt;</value>
  </data>
  <data name="IDS_PathList" xml:space="preserve">
    <value>&lt;path list&gt;</value>
  </data>
  <data name="IDS_Text" xml:space="preserve">
    <value>&lt;text&gt;</value>
  </data>
  <data name="IDS_ToolName" xml:space="preserve">
    <value>MoonScript Compiler</value>
  </data>
  <data name="SubmissionCanHaveAtMostOne" xml:space="preserve">
    <value>Submission can have at most one syntax tree.</value>
  </data>
  <data name="SubmissionCanOnlyInclude" xml:space="preserve">
    <value>Submission can only include script code.</value>
  </data>
  <data name="SyntaxTreeAlreadyPresent" xml:space="preserve">
    <value>Syntax tree already present.</value>
  </data>
  <data name="SyntaxTreeFromLoadNoRemoveReplace" xml:space="preserve">
    <value>SyntaxTree cannot be removed or replaced directly.</value>
  </data>
  <data name="SyntaxTreeNotFoundToRemove" xml:space="preserve">
    <value>SyntaxTree is not part of the compilation, so it cannot be removed.</value>
  </data>
  <data name="SyntaxTreeNotFoundWithFilePath" xml:space="preserve">
    <value>Syntax tree not found with file path: {0}.</value>
  </data>
  <data name="ThisMethodCanOnlyBeUsedToCreateTokens" xml:space="preserve">
    <value>This method can only be used to create tokens - {0} is not a token kind.</value>
  </data>
  <data name="TreeMustHaveARootNodeWith" xml:space="preserve">
    <value>Tree must have a root node with SyntaxKind.Chunk.</value>
  </data>
  <data name="UseIdentifierForTokens" xml:space="preserve">
    <value>Use Qtyi.CodeAnalysis.MoonScript.SyntaxFactory.Identifier to create tokens.</value>
  </data>
  <data name="UseLiteralForNumeric" xml:space="preserve">
    <value>Use Qtyi.CodeAnalysis.MoonScript.SyntaxFactory.Literal to create numeric literal tokens.</value>
  </data>
  <data name="WRN_FileAlreadyIncluded" xml:space="preserve">
    <value>Source file '{0}' specified multiple times.</value>
  </data>
  <data name="WRN_InvalidSearchPathDir" xml:space="preserve">
    <value>Invalid search path '{0}' specified in '{1}' -- '{2}'</value>
  </data>
  <data name="WRN_InvalidSearchPathDir_Title" xml:space="preserve">
    <value>Invalid search path specified</value>
  </data>
  <data name="WRN_UnifyReferenceBldRev" xml:space="preserve">
    <value>Assuming assembly reference '{0}' used by '{1}' matches identity '{2}' of '{3}', you may need to supply runtime policy.</value>
  </data>
  <data name="WRN_UnifyReferenceBldRev_Description" xml:space="preserve">
    <value>The two assemblies differ in release and/or version number. For unification to occur, you must specify directives in the application's .config file, and you must provide the correct strong name of an assembly.</value>
  </data>
  <data name="WRN_UnifyReferenceBldRev_Title" xml:space="preserve">
    <value>Assuming assembly reference matches identity.</value>
  </data>
  <data name="WRN_UnifyReferenceMajMin" xml:space="preserve">
    <value>Assuming assembly reference '{0}' used by '{1}' matches identity '{2}' of '{3}', you may need to supply runtime policy.</value>
  </data>
  <data name="WRN_UnifyReferenceMajMin_Description" xml:space="preserve">
    <value>The two assemblies differ in release and/or version number. For unification to occur, you must specify directives in the application's .config file, and you must provide the correct strong name of an assembly.</value>
  </data>
  <data name="WRN_UnifyReferenceMajMin_Title" xml:space="preserve">
    <value>Assuming assembly reference matches identity.</value>
  </data>
  <data name="WrongSemanticModelType" xml:space="preserve">
    <value>Expected a {0} SemanticModel.</value>
  </data>
</root>