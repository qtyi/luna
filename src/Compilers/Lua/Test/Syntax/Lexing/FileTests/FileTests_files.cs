// Licensed to the Qtyi under one or more agreements.
// The Qtyi licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Qtyi.CodeAnalysis.Lua.Test.Utilities;

namespace Qtyi.CodeAnalysis.Lua.UnitTests.Lexing;

partial class FileTests
{
    private void TestOfficialTestFile_files(string source, SourceCodeKind kind)
    {
        var V = LexSource(source, options: TestOptions.RegularDefault.WithKind(kind));

        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "debug");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "require");
        V(SyntaxKind.StringLiteralToken, text: "\"debug\"", value: ImmutableArray.Create("debug"U8.ToArray()));
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "math");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "maxinteger");
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "getenv");
        V(SyntaxKind.StringLiteralToken, text: "\"PATH\"", value: ImmutableArray.Create("PATH"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"string\"", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"non-existent-file\"", value: ImmutableArray.Create("non-existent-file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "testerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "stat");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "err");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "stat");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "err");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "testerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stderr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"got no value\"", value: ImmutableArray.Create("got no value"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"userdata\"", value: ImmutableArray.Create("userdata"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"file\"", value: ImmutableArray.Create("file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"userdata\"", value: ImmutableArray.Create("userdata"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stderr");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"file\"", value: ImmutableArray.Create("file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "8", value: 8L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "setmetatable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "getmetatable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "__name");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"FILE*\"", value: ImmutableArray.Create("FILE*"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'xuxu_nao_existe'", value: ImmutableArray.Create("xuxu_nao_existe"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"string\"", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"number\"", value: ImmutableArray.Create("number"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'/a/b/c/d'", value: ImmutableArray.Create("/a/b/c/d"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'w'", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"string\"", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"number\"", value: ImmutableArray.Create("number"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "tmpname");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "Message");
        V(SyntaxKind.OrKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"'os.tmpname' file cannot be open; skipping file tests\"", value: ImmutableArray.Create("'os.tmpname' file cannot be open; skipping file tests"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ElseKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'testing i/o'", value: ImmutableArray.Create("testing i/o"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "tmpname");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"rw\"", value: ImmutableArray.Create("rw"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"rb+\"", value: ImmutableArray.Create("rb+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"r+bk\"", value: ImmutableArray.Create("r+bk"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"+\"", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"b\"", value: ImmutableArray.Create("b"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"r+b\"", value: ImmutableArray.Create("r+b"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"r+\"", value: ImmutableArray.Create("r+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"rb\"", value: ImmutableArray.Create("rb"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "setlocale");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'C'", value: ImmutableArray.Create("C"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'all'", value: ImmutableArray.Create("all"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "dofile");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.TildeEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "_port");
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "status");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "code");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "status");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"string\"", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "code");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"number\"", value: ImmutableArray.Create("number"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo alo\"", value: ImmutableArray.Create("alo alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo alo\"", value: ImmutableArray.Create("alo alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cur\"", value: ImmutableArray.Create("cur"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "3", value: 3L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo alo\"", value: ImmutableArray.Create("alo alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "3", value: 3L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"joao\"", value: ImmutableArray.Create("joao"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"end\"", value: ImmutableArray.Create("end"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo joao\"", value: ImmutableArray.Create("alo joao"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'\"alo\"'", value: ImmutableArray.Create("\"alo\""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"{a}\\n\"", value: ImmutableArray.Create("{a}\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"second line\\n\"", value: ImmutableArray.Create("second line\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"third line \\n\"", value: ImmutableArray.Create("third line \n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'Xfourth_line'", value: ImmutableArray.Create("Xfourth_line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "rawequal");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'+'", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "120", value: 120L);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "5", value: 5L);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'r'", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rename");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rename");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"ab\"", value: ImmutableArray.Create("ab"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\\n\\t\\t  \"", value: ImmutableArray.Create("\n\n\t\t  "U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "3450", value: 3450L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "F");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "F");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "tostring");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "F");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"file (closed)\"", value: ImmutableArray.Create("file (closed)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"0X%x\\n\"", value: ImmutableArray.Create("0X%x\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"0xABCp-3\"", value: ImmutableArray.Create("0xABCp-3"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"0x%X\\n\"", value: ImmutableArray.Create("0x%X\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"-0xABCp-3\"", value: ImmutableArray.Create("-0xABCp-3"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0xABCp-3", value: 3.1241143005900085E-10D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"*n\"", value: ImmutableArray.Create("*n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"*n\"", value: ImmutableArray.Create("*n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "0xABCp-3", value: 3.1241143005900085E-10D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\na line\nanother line\n1234\n3.45\none\ntwo\nthree\n]]", value: ImmutableArray.Create("a line\nanother line\n1234\n3.45\none\ntwo\nthree\n"U8.ToArray()));
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "l1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "l2");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "l3");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "l4");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "n1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "n2");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "dummy");
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "l1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "l2");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "n1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "n2");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "dummy");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"l\"", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "l1");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a line\"", value: ImmutableArray.Create("a line"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "l2");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"another line\\n\"", value: ImmutableArray.Create("another line\n"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "n1");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1234", value: 1234L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "n2");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "3.45", value: 3.45D);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "dummy");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "l1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "l2");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "n1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "n2");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "l3");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "l4");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "dummy");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "7", value: 7L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"l\"", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"l\"", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"l\"", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "l1");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a line\\n\"", value: ImmutableArray.Create("a line\n"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "l2");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"another line\"", value: ImmutableArray.Create("another line"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "n1");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1234", value: 1234L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "n2");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "3.45", value: 3.45D);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "l3");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"one\"", value: ImmutableArray.Create("one"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "l4");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"two\"", value: ImmutableArray.Create("two"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "dummy");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "l1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "n1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "n2");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "dummy");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"l\"", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"l\"", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "l1");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a line\"", value: ImmutableArray.Create("a line"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "n1");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\nlocal x, z = coroutine.yield(10)\nlocal y = coroutine.yield(20)\nreturn x + y * z\n]]", value: ImmutableArray.Create("local x, z = coroutine.yield(10)\nlocal y = coroutine.yield(20)\nreturn x + y * z\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "coroutine");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "wrap");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "dofile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "100", value: 100L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "101", value: 101L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "20", value: 20L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "200", value: 200L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "100", value: 100L);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "200", value: 200L);
        V(SyntaxKind.AsteriskToken);
        V(SyntaxKind.NumericLiteralToken, text: "101", value: 101L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n-12.3-\t-0xffff+  .3|5.E-3X  +234e+13E 0xDEADBEEFDEADBEEFx\n0x1.13Ap+3e\n]]", value: ImmutableArray.Create("-12.3-\t-0xffff+  .3|5.E-3X  +234e+13E 0xDEADBEEFDEADBEEFx\n0x1.13Ap+3e\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"1234\"", value: ImmutableArray.Create("1234"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"0\"", value: ImmutableArray.Create("0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n.e+\t0.e;\t--;  0xX;\n]]", value: ImmutableArray.Create(".e+\t0.e;\t--;  0xX;\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "12.3", value: 12.3D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"-\"", value: ImmutableArray.Create("-"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "0xffff", value: 65535L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"+ \"", value: ImmutableArray.Create("+ "U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0.3", value: 0.3D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"|\"", value: ImmutableArray.Create("|"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "5e-3", value: 0.005D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"X\"", value: ImmutableArray.Create("X"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "234e13", value: 2340000000000000D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"E\"", value: ImmutableArray.Create("E"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0Xdeadbeefdeadbeef", value: -2401053088876216593L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"x\\n\"", value: ImmutableArray.Create("x\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0x1.13aP3", value: 7.833733661755105E-12D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"e\"", value: ImmutableArray.Create("e"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"^00*\\n$\"", value: ImmutableArray.Create("^00*\n$"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"e+\"", value: ImmutableArray.Create("e+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\";\"", value: ImmutableArray.Create(";"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"-;\"", value: ImmutableArray.Create("-;"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"X\"", value: ImmutableArray.Create("X"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\";\"", value: ImmutableArray.Create(";"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"non-existent-file\"", value: ImmutableArray.Create("non-existent-file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rename");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhileKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "6", value: 6L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"file is already closed\"", value: ImmutableArray.Create("file is already closed"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"file is already closed\"", value: ImmutableArray.Create("file is already closed"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "6", value: 6L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"file\"", value: ImmutableArray.Create("file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "tostring");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "sub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "5", value: 5L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"file \"", value: ImmutableArray.Create("file "U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "6", value: 6L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"closed file\"", value: ImmutableArray.Create("closed file"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "tostring");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"file (closed)\"", value: ImmutableArray.Create("file (closed)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"closed file\"", value: ImmutableArray.Create("closed file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "6", value: 6L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "300", value: 300L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "250", value: 250L);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "table");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "unpack");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "250", value: 250L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"too many arguments\"", value: ImmutableArray.Create("too many arguments"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "table");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "unpack");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"xuxu\"", value: ImmutableArray.Create("xuxu"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"string\"", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"number\"", value: ImmutableArray.Create("number"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid format\"", value: ImmutableArray.Create("invalid format"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"x\"", value: ImmutableArray.Create("x"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "5", value: 5L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'l'", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'\"alo\"'", value: ImmutableArray.Create("\"alo\""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"second line\"", value: ImmutableArray.Create("second line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"third line \"", value: ImmutableArray.Create("third line "U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'L'", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"third line \\n\"", value: ImmutableArray.Create("third line \n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"X\"", value: ImmutableArray.Create("X"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.StringLiteralToken, text: "\"fourth_line\"", value: ImmutableArray.Create("fourth_line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"fourth_line\"", value: ImmutableArray.Create("fourth_line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cur\"", value: ImmutableArray.Create("cur"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.StringLiteralToken, text: "\"fourth_line\"", value: ImmutableArray.Create("fourth_line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"fourth_line\"", value: ImmutableArray.Create("fourth_line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'n'", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "3450", value: 3450L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "30000", value: 30000L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "undef");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "undef");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'n'", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'n'", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "undef");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "''", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "''", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'+'", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\" input file is closed\"", value: ImmutableArray.Create(" input file is closed"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'0123456789'", value: ImmutableArray.Create("0123456789"U8.ToArray()));
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.AsteriskToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo\"", value: ImmutableArray.Create("alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\" output file is closed\"", value: ImmutableArray.Create(" output file is closed"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a+b\"", value: ImmutableArray.Create("a+b"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "' '", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "' '", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "';'", value: ImmutableArray.Create(";"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'end of file\\n'", value: ImmutableArray.Create("end of file\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "flush");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "flush");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'+'", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo\"", value: ImmutableArray.Create("alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "' '", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "' '", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "';end of file\\n'", value: ImmutableArray.Create(";end of file\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "ismsg");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"string\"", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "r");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "r");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "ismsg");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"number\"", value: ImmutableArray.Create("number"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "r");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"whatever\"", value: ImmutableArray.Create("whatever"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "r");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "ismsg");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"number\"", value: ImmutableArray.Create("number"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "r");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "r");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.FalseKeyword);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "ismsg");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\\nline\\nother\"", value: ImmutableArray.Create("\n\nline\nother"U8.ToArray()));
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"line\\n\"", value: ImmutableArray.Create("line\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"other\"", value: ImmutableArray.Create("other"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\\nline\\nother\"", value: ImmutableArray.Create("\n\nline\nother"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\\nline\\nother\"", value: ImmutableArray.Create("\n\nline\nother"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\\nline\\nother\"", value: ImmutableArray.Create("\n\nline\nother"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"l\"", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lineother\"", value: ImmutableArray.Create("lineother"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.StringLiteralToken, text: "\"a = 10 + 34\\na = 2*a\\na = -a\\n\"", value: ImmutableArray.Create("a = 10 + 34\na = 2*a\na = -a\n"U8.ToArray()));
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "34", value: 34L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.AsteriskToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "gettoclose");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "lv");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "lv");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "lv");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "stvar");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "debug");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "getlocal");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "lv");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"(for state)\"", value: ImmutableArray.Create("(for state)"U8.ToArray()));
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "stvar");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "stvar");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "stvar");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "4", value: 4L);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "gettoclose");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"file\"", value: ImmutableArray.Create("file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.BreakKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"closed file\"", value: ImmutableArray.Create("closed file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "foo");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "name");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "name");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "gettoclose");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"file\"", value: ImmutableArray.Create("file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "error");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "st");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "foo");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "st");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.FalseKeyword);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"closed file\"", value: ImmutableArray.Create("closed file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.StringLiteralToken, text: "\"0123456789\\n\"", value: ImmutableArray.Create("0123456789\n"U8.ToArray()));
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ElseKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"0\"", value: ImmutableArray.Create("0"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"12\"", value: ImmutableArray.Create("12"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"3456789\\n\"", value: ImmutableArray.Create("3456789\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.BreakKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"0123456789\\n\"", value: ImmutableArray.Create("0123456789\n"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.StringLiteralToken, text: "\"00\\n10\\n20\\n30\\n40\\n\"", value: ImmutableArray.Create("00\n10\n20\n30\n40\n"U8.ToArray()));
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "40", value: 40L);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ElseKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\nlocal y\n= X\nX =\nX *\n2 +\nX;\nX =\nX\n-                                   y;\n]]", value: ImmutableArray.Create("local y\n= X\nX =\nX *\n2 +\nX;\nX =\nX\n-                                   y;\n"U8.ToArray()));
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "4", value: 4L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "3", value: 3L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "8", value: 8L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'+'", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "x1");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"string\\n\\n\\\\com \\\"\\\"''coisas [[estranhas]] ]]'\"", value: ImmutableArray.Create("string\n\n\\com \"\"''coisas [[estranhas]] ]]'"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"X2 = %q\\n-- comment without ending EOS\"", value: ImmutableArray.Create("X2 = %q\n-- comment without ending EOS"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "x1");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "x1");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X2");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X2");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'+'", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "testloadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "expres");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "res");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "res");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "expres");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "testloadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "testloadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"# a non-ending comment\"", value: ImmutableArray.Create("# a non-ending comment"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "testloadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBB\\xBF# some comment\\nreturn 234\"", value: ImmutableArray.Create("﻿# some comment\nreturn 234"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "234", value: 234L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "testloadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBB\\xBFreturn 239\"", value: ImmutableArray.Create("﻿return 239"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "239", value: 239L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "testloadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBB\\xBF\"", value: ImmutableArray.Create("﻿"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "testloadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"# a comment\\nreturn require'debug'.getinfo(1).currentline\"", value: ImmutableArray.Create("# a comment\nreturn require'debug'.getinfo(1).currentline"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"wb\"", value: ImmutableArray.Create("wb"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "dump");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'\\0alo\\255'", value: ImmutableArray.Create<byte>(0, 97, 108, 111, 255));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'hi'", value: ImmutableArray.Create("hi"U8.ToArray()));
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0alo\\255\"", value: ImmutableArray.Create<byte>(0, 97, 108, 111, 255));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"hi\"", value: ImmutableArray.Create("hi"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"wb\"", value: ImmutableArray.Create("wb"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "dump");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"b\"", value: ImmutableArray.Create("b"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"function\"", value: ImmutableArray.Create("function"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"wb\"", value: ImmutableArray.Create("wb"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"#this is a comment for a binary file\\0\\n\"", value: ImmutableArray.Create("#this is a comment for a binary file\0\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "dump");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.NumericLiteralToken, text: "20", value: 20L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'\\0\\0\\0'", value: ImmutableArray.Create("\0\0\0"U8.ToArray()));
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "20", value: 20L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\\0\\0\"", value: ImmutableArray.Create("\0\0\0"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'w'", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n    if (...) then a = 15; return b, c, d\n    else return _ENV\n    end\n  ]]", value: ImmutableArray.Create("    if (...) then a = 15; return b, c, d\n    else return _ENV\n    end\n  "U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "12", value: 12L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"xuxu\"", value: ImmutableArray.Create("xuxu"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'t'", value: ImmutableArray.Create("t"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "15", value: 15L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "12", value: 12L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'t'", value: ImmutableArray.Create("t"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'w'", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"return 10\"", value: ImmutableArray.Create("return 10"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'b'", value: ImmutableArray.Create("b"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a text chunk\"", value: ImmutableArray.Create("a text chunk"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'w'", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\27 return 10\"", value: ImmutableArray.Create("\u001B return 10"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'t'", value: ImmutableArray.Create("t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a binary chunk\"", value: ImmutableArray.Create("a binary chunk"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"qualquer coisa\\n\"", value: ImmutableArray.Create("qualquer coisa\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"mais qualquer coisa\"", value: ImmutableArray.Create("mais qualquer coisa"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'wb'", value: ImmutableArray.Create("wb"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"outra coisa\\0\\1\\3\\0\\0\\0\\0\\255\\0\"", value: ImmutableArray.Create<byte>(111, 117, 116, 114, 97, 32, 99, 111, 105, 115, 97, 0, 1, 3, 0, 0, 0, 0, 255, 0));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "filehandle");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'r+'", value: ImmutableArray.Create("r+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "otherfilehandle");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'rb'", value: ImmutableArray.Create("rb"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "filehandle");
        V(SyntaxKind.TildeEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "otherfilehandle");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "filehandle");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"userdata\"", value: ImmutableArray.Create("userdata"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "filehandle");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'l'", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"qualquer coisa\"", value: ImmutableArray.Create("qualquer coisa"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfilehandle");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.StringLiteralToken, text: "\"outra coisa\"", value: ImmutableArray.Create("outra coisa"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"outra coisa\"", value: ImmutableArray.Create("outra coisa"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "filehandle");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'l'", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"mais qualquer coisa\"", value: ImmutableArray.Create("mais qualquer coisa"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "filehandle");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "filehandle");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"userdata\"", value: ImmutableArray.Create("userdata"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfilehandle");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "4", value: 4L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\\1\\3\\0\"", value: ImmutableArray.Create("\0\u0001\u0003\0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "3", value: 3L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\\0\\0\"", value: ImmutableArray.Create("\0\0\0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\255\"", value: ImmutableArray.Create<byte>(255));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\"", value: ImmutableArray.Create("\0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfilehandle");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfilehandle");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n 123.4\t-56e-2  not a number\nsecond line\nthird line\n\nand the rest of the file\n]]", value: ImmutableArray.Create(" 123.4\t-56e-2  not a number\nsecond line\nthird line\n\nand the rest of the file\n"U8.ToArray()));
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "_");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "e");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "h");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "__");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'n'", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'n'", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'l'", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'l'", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'l'", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "_");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "' '", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "__");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'number'", value: ImmutableArray.Create("number"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "123.4", value: 123.4D);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "56e-2", value: 0.56D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'second line'", value: ImmutableArray.Create("second line"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "e");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'third line'", value: ImmutableArray.Create("third line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "h");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n\nand the rest of the file\n]]", value: ImmutableArray.Create("and the rest of the file\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "setvbuf");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"full\"", value: ImmutableArray.Create("full"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "2000", value: 2000L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"x\"", value: ImmutableArray.Create("x"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"all\"", value: ImmutableArray.Create("all"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"all\"", value: ImmutableArray.Create("all"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"x\"", value: ImmutableArray.Create("x"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "setvbuf");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"no\"", value: ImmutableArray.Create("no"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"x\"", value: ImmutableArray.Create("x"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"all\"", value: ImmutableArray.Create("all"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"x\"", value: ImmutableArray.Create("x"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "setvbuf");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"line\"", value: ImmutableArray.Create("line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"x\"", value: ImmutableArray.Create("x"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"all\"", value: ImmutableArray.Create("all"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\\n\"", value: ImmutableArray.Create("a\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"all\"", value: ImmutableArray.Create("all"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"xa\\n\"", value: ImmutableArray.Create("xa\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "_soft");
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"testing large files (> BUFSIZ)\"", value: ImmutableArray.Create("testing large files (> BUFSIZ)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "5001", value: 5001L);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'0123456789123'", value: ImmutableArray.Create("0123456789123"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'\\n12346'", value: ImmutableArray.Create("\n12346"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'set'", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "30001", value: 30001L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1005", value: 1005L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "100003", value: 100003L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "5001", value: 5001L);
        V(SyntaxKind.AsteriskToken);
        V(SyntaxKind.NumericLiteralToken, text: "13", value: 13L);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "6", value: 6L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'set'", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "_port");
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.OrKeyword);
        V(SyntaxKind.IdentifierToken, text: "ARG");
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.WhileKeyword);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'\"'", value: ImmutableArray.Create("\""U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "'\"'", value: ImmutableArray.Create("\""U8.ToArray()));
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"testing popen/pclose and execute\"", value: ImmutableArray.Create("testing popen/pclose and execute"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "popen");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cat\"", value: ImmutableArray.Create("cat"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "popen");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cat\"", value: ImmutableArray.Create("cat"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"r+\"", value: ImmutableArray.Create("r+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "popen");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cat\"", value: ImmutableArray.Create("cat"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"rw\"", value: ImmutableArray.Create("rw"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "tmpname");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "popen");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cat - > \"", value: ImmutableArray.Create("cat - > "U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a line\"", value: ImmutableArray.Create("a line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "popen");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cat - < \"", value: ImmutableArray.Create("cat - < "U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a line\"", value: ImmutableArray.Create("a line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "tests");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"ls > /dev/null\"", value: ImmutableArray.Create("ls > /dev/null"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"ok\"", value: ImmutableArray.Create("ok"U8.ToArray()));
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"not-to-be-found-command\"", value: ImmutableArray.Create("not-to-be-found-command"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"exit\"", value: ImmutableArray.Create("exit"U8.ToArray()));
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"exit 3\"", value: ImmutableArray.Create("exit 3"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"exit\"", value: ImmutableArray.Create("exit"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "3", value: 3L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"exit 129\"", value: ImmutableArray.Create("exit 129"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"exit\"", value: ImmutableArray.Create("exit"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "129", value: 129L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"kill -s HUP $$\"", value: ImmutableArray.Create("kill -s HUP $$"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"signal\"", value: ImmutableArray.Create("signal"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"kill -s KILL $$\"", value: ImmutableArray.Create("kill -s KILL $$"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"signal\"", value: ImmutableArray.Create("signal"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "9", value: 9L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"sh -c 'kill -s HUP $$'\"", value: ImmutableArray.Create("sh -c 'kill -s HUP $$'"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"exit\"", value: ImmutableArray.Create("exit"U8.ToArray()));
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "' -e \" \"'", value: ImmutableArray.Create(" -e \" \""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"ok\"", value: ImmutableArray.Create("ok"U8.ToArray()));
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "' -e \"os.exit(0, true)\"'", value: ImmutableArray.Create(" -e \"os.exit(0, true)\""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"ok\"", value: ImmutableArray.Create("ok"U8.ToArray()));
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "' -e \"os.exit(20, true)\"'", value: ImmutableArray.Create(" -e \"os.exit(20, true)\""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"exit\"", value: ImmutableArray.Create("exit"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "20", value: 20L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n(some error messages are expected now)\"", value: ImmutableArray.Create("\n(some error messages are expected now)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "_");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "ipairs");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "tests");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "z");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "popen");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "x1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "y1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "z1");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "execute");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "x1");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "y1");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "z");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "z1");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"ok\"", value: ImmutableArray.Create("ok"U8.ToArray()));
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'exit'", value: ImmutableArray.Create("exit"U8.ToArray()));
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "z");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ElseKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "3", value: 3L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "z");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OrKeyword);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "3", value: 3L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "z");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "tmpfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"file\"", value: ImmutableArray.Create("file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo\"", value: ImmutableArray.Create("alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo\"", value: ImmutableArray.Create("alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.StringLiteralToken, text: "'+'", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"testing date/time\"", value: ImmutableArray.Create("testing date/time"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"!\"", value: ImmutableArray.Create("!"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\\0\"", value: ImmutableArray.Create("\0\0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\\0\"", value: ImmutableArray.Create("\0\0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"!\\0\\0\"", value: ImmutableArray.Create("!\0\0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\\0\"", value: ImmutableArray.Create("\0\0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "10000", value: 10000L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"*t\"", value: ImmutableArray.Create("*t"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%d\"", value: ImmutableArray.Create("%d"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%d\"", value: ImmutableArray.Create("%d"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%\"", value: ImmutableArray.Create("%"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "200", value: 200L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%\"", value: ImmutableArray.Create("%"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "100", value: 100L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "checkDateTable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"*t\"", value: ImmutableArray.Create("*t"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[assert(D.year==%Y and D.month==%m and D.day==%d and\n    D.hour==%H and D.min==%M and D.sec==%S and\n    D.wday==%w+1 and D.yday==%j)]]", value: ImmutableArray.Create("assert(D.year==%Y and D.month==%m and D.day==%d and\n    D.hour==%H and D.min==%M and D.sec==%S and\n    D.wday==%w+1 and D.yday==%j)"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "checkDateTable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "_port");
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "checkDateTable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkDateTable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkDateTable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkDateTable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0x7fffffff", value: 2147483647L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkDateTable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0x80000000", value: 2147483648L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid conversion specifier\"", value: ImmutableArray.Create("invalid conversion specifier"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%\"", value: ImmutableArray.Create("%"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid conversion specifier\"", value: ImmutableArray.Create("invalid conversion specifier"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%9\"", value: ImmutableArray.Create("%9"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid conversion specifier\"", value: ImmutableArray.Create("invalid conversion specifier"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%\"", value: ImmutableArray.Create("%"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid conversion specifier\"", value: ImmutableArray.Create("invalid conversion specifier"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%O\"", value: ImmutableArray.Create("%O"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid conversion specifier\"", value: ImmutableArray.Create("invalid conversion specifier"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%E\"", value: ImmutableArray.Create("%E"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid conversion specifier\"", value: ImmutableArray.Create("invalid conversion specifier"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%Ea\"", value: ImmutableArray.Create("%Ea"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"not an integer\"", value: ImmutableArray.Create("not an integer"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'x'", value: ImmutableArray.Create("x"U8.ToArray()));
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"not an integer\"", value: ImmutableArray.Create("not an integer"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1.5", value: 1.5D);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"missing\"", value: ImmutableArray.Create("missing"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "12", value: 12L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "packsize");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"i\"", value: ImmutableArray.Create("i"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "4", value: 4L);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"field 'year' is out-of-bound\"", value: ImmutableArray.Create("field 'year' is out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1899", value: 1899L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"field 'year' is out-of-bound\"", value: ImmutableArray.Create("field 'year' is out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "math");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "maxinteger");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"field 'year' is out-of-bound\"", value: ImmutableArray.Create("field 'year' is out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1900", value: 1900L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "_port");
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%Ex\"", value: ImmutableArray.Create("%Ex"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'string'", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%Oy\"", value: ImmutableArray.Create("%Oy"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'string'", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t0");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1970", value: 1970L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1970", value: 1970L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "sec");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.IdentifierToken, text: "t0");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "t0");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1970", value: 1970L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1970", value: 1970L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "sec");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.IdentifierToken, text: "t0");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.GreaterThanEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "62", value: 62L);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"out-of-bound\"", value: ImmutableArray.Create("out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "packsize");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"i\"", value: ImmutableArray.Create("i"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "4", value: 4L);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "testerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"out-of-bound\"", value: ImmutableArray.Create("out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%Y\"", value: ImmutableArray.Create("%Y"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "40", value: 40L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"  4-byte time_t\"", value: ImmutableArray.Create("  4-byte time_t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cannot be represented\"", value: ImmutableArray.Create("cannot be represented"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "4000", value: 4000L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ElseKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"  8-byte time_t\"", value: ImmutableArray.Create("  8-byte time_t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cannot be represented\"", value: ImmutableArray.Create("cannot be represented"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%Y\"", value: ImmutableArray.Create("%Y"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "60", value: 60L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1899", value: 1899L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "12", value: 12L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "23", value: 23L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "59", value: 59L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "sec");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "59", value: 59L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"represented\"", value: ImmutableArray.Create("represented"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1899", value: 1899L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "12", value: 12L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "23", value: 23L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "59", value: 59L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "sec");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "60", value: 60L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"field 'day' is out-of-bound\"", value: ImmutableArray.Create("field 'day' is out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "32", value: 32L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"field 'month' is out-of-bound\"", value: ImmutableArray.Create("field 'month' is out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"field 'year' is out-of-bound\"", value: ImmutableArray.Create("field 'year' is out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1900", value: 1900L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ElseKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"  8-byte time_t\"", value: ImmutableArray.Create("  8-byte time_t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%Y\"", value: ImmutableArray.Create("%Y"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "60", value: 60L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cannot be represented\"", value: ImmutableArray.Create("cannot be represented"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "60", value: 60L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"*t\"", value: ImmutableArray.Create("*t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "isdst");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"no daylight saving information\"", value: ImmutableArray.Create("no daylight saving information"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ElseKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "isdst");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'boolean'", value: ImmutableArray.Create("boolean"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "isdst");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"*t\"", value: ImmutableArray.Create("*t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "math");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "abs");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "difftime");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SlashToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "24", value: 24L);
        V(SyntaxKind.AsteriskToken);
        V(SyntaxKind.NumericLiteralToken, text: "3600", value: 3600L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "365", value: 365L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"*t\"", value: ImmutableArray.Create("*t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "diff");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "difftime");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.LessThanEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "diff");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "diff");
        V(SyntaxKind.LessThanEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "diff");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "difftime");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.LessThanEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "diff");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "diff");
        V(SyntaxKind.LessThanEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "2000", value: 2000L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "23", value: 23L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "12", value: 12L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t2");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "2000", value: 2000L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "23", value: 23L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "sec");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "19", value: 19L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "difftime");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t2");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "60", value: 60L);
        V(SyntaxKind.AsteriskToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "19", value: 19L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "2005", value: 2005L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "sec");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "3602", value: 3602L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "12", value: 12L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "2004", value: 2004L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "23", value: 23L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "59", value: 59L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "sec");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "58", value: 58L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "yday");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "366", value: 366L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'%d %m %Y %H %M %S'", value: ImmutableArray.Create("%d %m %Y %H %M %S"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "h");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "match");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"(%d+) (%d+) (%d+) (%d+) (%d+) (%d+)\"", value: ImmutableArray.Create("(%d+) (%d+) (%d+) (%d+) (%d+) (%d+)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "h");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "h");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'test done on %2.2d/%2.2d/%d'", value: ImmutableArray.Create("test done on %2.2d/%2.2d/%d"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "', at %2.2d:%2.2d:%2.2d\\n'", value: ImmutableArray.Create(", at %2.2d:%2.2d:%2.2d\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "h");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'%s\\n'", value: ImmutableArray.Create("%s\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "_VERSION");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfFileToken);
    }

    private void TestOfficialTestFileWithTrivia_files(string source, SourceCodeKind kind)
    {
        var V = LexSource(source, options: TestOptions.RegularDefault.WithKind(kind), withTrivia: true);

        V(SyntaxKind.SingleLineCommentTrivia, text: "-- $Id: testes/files.lua $", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- See Copyright Notice in file all.lua", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "debug");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "require");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"debug\"", value: ImmutableArray.Create("debug"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "math");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "maxinteger");
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "getenv");
        V(SyntaxKind.StringLiteralToken, text: "\"PATH\"", value: ImmutableArray.Create("PATH"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"string\"", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"non-existent-file\"", value: ImmutableArray.Create("non-existent-file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "testerr");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "stat");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "err");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "stat");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "err");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "testerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- cannot close standard files", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stderr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- cannot call close method without an argument (new in 5.3.5)", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"got no value\"", value: ImmutableArray.Create("got no value"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"userdata\"", value: ImmutableArray.Create("userdata"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"file\"", value: ImmutableArray.Create("file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"userdata\"", value: ImmutableArray.Create("userdata"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stderr");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"file\"", value: ImmutableArray.Create("file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "8", value: 8L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "setmetatable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "getmetatable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "__name");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"FILE*\"", value: ImmutableArray.Create("FILE*"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'xuxu_nao_existe'", value: ImmutableArray.Create("xuxu_nao_existe"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"string\"", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"number\"", value: ImmutableArray.Create("number"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'/a/b/c/d'", value: ImmutableArray.Create("/a/b/c/d"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'w'", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"string\"", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"number\"", value: ImmutableArray.Create("number"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "tmpname");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "Message");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OrKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"'os.tmpname' file cannot be open; skipping file tests\"", value: ImmutableArray.Create("'os.tmpname' file cannot be open; skipping file tests"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ElseKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "--{  most tests here need tmpname", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'testing i/o'", value: ImmutableArray.Create("testing i/o"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "tmpname");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"rw\"", value: ImmutableArray.Create("rw"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"rb+\"", value: ImmutableArray.Create("rb+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"r+bk\"", value: ImmutableArray.Create("r+bk"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"+\"", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"b\"", value: ImmutableArray.Create("b"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"r+b\"", value: ImmutableArray.Create("r+b"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"r+\"", value: ImmutableArray.Create("r+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"rb\"", value: ImmutableArray.Create("rb"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "setlocale");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'C'", value: ImmutableArray.Create("C"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'all'", value: ImmutableArray.Create("all"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "dofile");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.TildeEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_port");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- invalid seek", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "status");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "code");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "status");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"string\"", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "code");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"number\"", value: ImmutableArray.Create("number"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo alo\"", value: ImmutableArray.Create("alo alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo alo\"", value: ImmutableArray.Create("alo alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cur\"", value: ImmutableArray.Create("cur"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "3", value: 3L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo alo\"", value: ImmutableArray.Create("alo alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "3", value: 3L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"joao\"", value: ImmutableArray.Create("joao"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"end\"", value: ImmutableArray.Create("end"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo joao\"", value: ImmutableArray.Create("alo joao"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'\"alo\"'", value: ImmutableArray.Create("\"alo\""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"{a}\\n\"", value: ImmutableArray.Create("{a}\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"second line\\n\"", value: ImmutableArray.Create("second line\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"third line \\n\"", value: ImmutableArray.Create("third line \n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'Xfourth_line'", value: ImmutableArray.Create("Xfourth_line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- file should be closed by GC", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdin");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "rawequal");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'+'", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test GC for files", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "120", value: 120L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "5", value: 5L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'r'", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rename");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rename");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"ab\"", value: ImmutableArray.Create("ab"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\\n\\t\\t  \"", value: ImmutableArray.Create("\n\n\t\t  "U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "3450", value: 3450L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- closing file by scope", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "F");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "F");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "tostring");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "F");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"file (closed)\"", value: ImmutableArray.Create("file (closed)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test writing/reading numbers", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"0X%x\\n\"", value: ImmutableArray.Create("0X%x\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"0xABCp-3\"", value: ImmutableArray.Create("0xABCp-3"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"0x%X\\n\"", value: ImmutableArray.Create("0x%X\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"-0xABCp-3\"", value: ImmutableArray.Create("-0xABCp-3"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0xABCp-3", value: 3.1241143005900085E-10D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"*n\"", value: ImmutableArray.Create("*n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test old format (with '*')", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"*n\"", value: ImmutableArray.Create("*n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "0xABCp-3", value: 3.1241143005900085E-10D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test old format (with '*')", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- testing multiple arguments to io.read", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\na line\nanother line\n1234\n3.45\none\ntwo\nthree\n]]", value: ImmutableArray.Create("a line\nanother line\n1234\n3.45\none\ntwo\nthree\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l2");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l3");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l4");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n2");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "dummy");
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "l1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l2");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n2");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "dummy");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"l\"", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "l1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"a line\"", value: ImmutableArray.Create("a line"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l2");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"another line\\n\"", value: ImmutableArray.Create("another line\n"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "n1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1234", value: 1234L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n2");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "3.45", value: 3.45D);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "dummy");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "l1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l2");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n2");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l3");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l4");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "dummy");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "7", value: 7L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"l\"", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"l\"", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"l\"", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "l1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"a line\\n\"", value: ImmutableArray.Create("a line\n"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l2");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"another line\"", value: ImmutableArray.Create("another line"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "n1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1234", value: 1234L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n2");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "3.45", value: 3.45D);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l3");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"one\"", value: ImmutableArray.Create("one"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l4");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"two\"", value: ImmutableArray.Create("two"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "dummy");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- second item failing", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "l1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n2");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "dummy");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"l\"", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"l\"", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "l1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"a line\"", value: ImmutableArray.Create("a line"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n1");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test yielding during 'dofile'", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\nlocal x, z = coroutine.yield(10)\nlocal y = coroutine.yield(20)\nreturn x + y * z\n]]", value: ImmutableArray.Create("local x, z = coroutine.yield(10)\nlocal y = coroutine.yield(20)\nreturn x + y * z\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "coroutine");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "wrap");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "dofile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "100", value: 100L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "101", value: 101L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "20", value: 20L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "200", value: 200L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "100", value: 100L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "200", value: 200L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AsteriskToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "101", value: 101L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test number termination", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n-12.3-\t-0xffff+  .3|5.E-3X  +234e+13E 0xDEADBEEFDEADBEEFx\n0x1.13Ap+3e\n]]", value: ImmutableArray.Create("-12.3-\t-0xffff+  .3|5.E-3X  +234e+13E 0xDEADBEEFDEADBEEFx\n0x1.13Ap+3e\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- very long number", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"1234\"", value: ImmutableArray.Create("1234"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"0\"", value: ImmutableArray.Create("0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- invalid sequences (must read and discard valid prefixes)", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n.e+\t0.e;\t--;  0xX;\n]]", value: ImmutableArray.Create(".e+\t0.e;\t--;  0xX;\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "12.3", value: 12.3D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"-\"", value: ImmutableArray.Create("-"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "0xffff", value: 65535L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"+ \"", value: ImmutableArray.Create("+ "U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0.3", value: 0.3D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"|\"", value: ImmutableArray.Create("|"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "5e-3", value: 0.005D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"X\"", value: ImmutableArray.Create("X"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "234e13", value: 2340000000000000D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"E\"", value: ImmutableArray.Create("E"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0Xdeadbeefdeadbeef", value: -2401053088876216593L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"x\\n\"", value: ImmutableArray.Create("x\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0x1.13aP3", value: 7.833733661755105E-12D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"e\"", value: ImmutableArray.Create("e"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- attempt to read too long number", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- fails", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- read rest of line", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"^00*\\n$\"", value: ImmutableArray.Create("^00*\n$"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- lots of 0's left", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"e+\"", value: ImmutableArray.Create("e+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\";\"", value: ImmutableArray.Create(";"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"-;\"", value: ImmutableArray.Create("-;"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"X\"", value: ImmutableArray.Create("X"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\";\"", value: ImmutableArray.Create(";"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- end of file", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test line generators", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"non-existent-file\"", value: ImmutableArray.Create("non-existent-file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rename");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhileKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "6", value: 6L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- number of lines in the file", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"file is already closed\"", value: ImmutableArray.Create("file is already closed"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"file is already closed\"", value: ImmutableArray.Create("file is already closed"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- copy from file to otherfile", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "6", value: 6L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- copy from otherfile back to file", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"file\"", value: ImmutableArray.Create("file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "tostring");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "sub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "5", value: 5L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"file \"", value: ImmutableArray.Create("file "U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "6", value: 6L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"closed file\"", value: ImmutableArray.Create("closed file"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "tostring");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"file (closed)\"", value: ImmutableArray.Create("file (closed)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"closed file\"", value: ImmutableArray.Create("closed file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "6", value: 6L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- bug in 5.3.1", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "300", value: 300L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "250", value: 250L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "table");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "unpack");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- everything ok here", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "250", value: 250L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- one too many", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"too many arguments\"", value: ImmutableArray.Create("too many arguments"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "table");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "unpack");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- ensure 'otherfile' is closed", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test error returns", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"xuxu\"", value: ImmutableArray.Create("xuxu"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"string\"", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"number\"", value: ImmutableArray.Create("number"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid format\"", value: ImmutableArray.Create("invalid format"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"x\"", value: ImmutableArray.Create("x"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- not eof", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "5", value: 5L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'l'", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\"alo\"'", value: ImmutableArray.Create("\"alo\""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"second line\"", value: ImmutableArray.Create("second line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"third line \"", value: ImmutableArray.Create("third line "U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'L'", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"third line \\n\"", value: ImmutableArray.Create("third line \n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"X\"", value: ImmutableArray.Create("X"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.StringLiteralToken, text: "\"fourth_line\"", value: ImmutableArray.Create("fourth_line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"fourth_line\"", value: ImmutableArray.Create("fourth_line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cur\"", value: ImmutableArray.Create("cur"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.StringLiteralToken, text: "\"fourth_line\"", value: ImmutableArray.Create("fourth_line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"fourth_line\"", value: ImmutableArray.Create("fourth_line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- empty line", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'n'", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "3450", value: 3450L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- end of file", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- end of file", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "30000", value: 30000L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- end of file", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "undef");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- end of file", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "undef");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'n'", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- end of file", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'n'", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "undef");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "''", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- end of file (OK for 'a')", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "''", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- end of file (OK for 'a')", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'+'", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\" input file is closed\"", value: ImmutableArray.Create(" input file is closed"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'0123456789'", value: ImmutableArray.Create("0123456789"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.AsteriskToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo\"", value: ImmutableArray.Create("alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\" output file is closed\"", value: ImmutableArray.Create(" output file is closed"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"a+b\"", value: ImmutableArray.Create("a+b"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "' '", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "' '", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "';'", value: ImmutableArray.Create(";"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'end of file\\n'", value: ImmutableArray.Create("end of file\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "flush");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "flush");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'+'", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"alo\"", value: ImmutableArray.Create("alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "' '", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "' '", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "';end of file\\n'", value: ImmutableArray.Create(";end of file\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test errors in read/write", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "ismsg");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- error message is not a code number", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"string\"", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- read", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "r");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "r");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "ismsg");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"number\"", value: ImmutableArray.Create("number"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- write", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "r");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"whatever\"", value: ImmutableArray.Create("whatever"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "r");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "ismsg");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"number\"", value: ImmutableArray.Create("number"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- lines", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "r");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "r");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FalseKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "ismsg");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test for L format", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\\nline\\nother\"", value: ImmutableArray.Create("\n\nline\nother"U8.ToArray()));
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"line\\n\"", value: ImmutableArray.Create("line\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"other\"", value: ImmutableArray.Create("other"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\\nline\\nother\"", value: ImmutableArray.Create("\n\nline\nother"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\\nline\\nother\"", value: ImmutableArray.Create("\n\nline\nother"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\\nline\\nother\"", value: ImmutableArray.Create("\n\nline\nother"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"l\"", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lineother\"", value: ImmutableArray.Create("lineother"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.StringLiteralToken, text: "\"a = 10 + 34\\na = 2*a\\na = -a\\n\"", value: ImmutableArray.Create("a = 10 + 34\na = 2*a\na = -a\n"U8.ToArray()));
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "34", value: 34L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AsteriskToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- testing closing file in line iteration", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- get the to-be-closed variable from a loop", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "gettoclose");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "lv");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "lv");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "lv");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "stvar");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- to-be-closed is 4th state variable in the loop", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "debug");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "getlocal");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "lv");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"(for state)\"", value: ImmutableArray.Create("(for state)"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "stvar");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "stvar");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "stvar");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "4", value: 4L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "gettoclose");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"file\"", value: ImmutableArray.Create("file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.BreakKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"closed file\"", value: ImmutableArray.Create("closed file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "foo");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "name");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "l");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "name");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "gettoclose");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"file\"", value: ImmutableArray.Create("file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "error");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- exit loop with an error", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "st");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "foo");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "st");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FalseKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"closed file\"", value: ImmutableArray.Create("closed file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test for multipe arguments in 'lines'", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.StringLiteralToken, text: "\"0123456789\\n\"", value: ImmutableArray.Create("0123456789\n"U8.ToArray()));
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ElseKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"0\"", value: ImmutableArray.Create("0"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"12\"", value: ImmutableArray.Create("12"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"3456789\\n\"", value: ImmutableArray.Create("3456789\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.BreakKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"0123456789\\n\"", value: ImmutableArray.Create("0123456789\n"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- to close file in previous iteration", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.StringLiteralToken, text: "\"00\\n10\\n20\\n30\\n40\\n\"", value: ImmutableArray.Create("00\n10\n20\n30\n40\n"U8.ToArray()));
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"n\"", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "40", value: 40L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ElseKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test load x lines", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\nlocal y\n= X\nX =\nX *\n2 +\nX;\nX =\nX\n-                                   y;\n]]", value: ImmutableArray.Create("local y\n= X\nX =\nX *\n2 +\nX;\nX =\nX\n-                                   y;\n"U8.ToArray()));
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- to close file in previous iteration", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"L\"", value: ImmutableArray.Create("L"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "4", value: 4L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "lines");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "3", value: 3L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "8", value: 8L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'+'", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "x1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"string\\n\\n\\\\com \\\"\\\"''coisas [[estranhas]] ]]'\"", value: ImmutableArray.Create("string\n\n\\com \"\"''coisas [[estranhas]] ]]'"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"X2 = %q\\n-- comment without ending EOS\"", value: ImmutableArray.Create("X2 = %q\n-- comment without ending EOS"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "x1");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "x1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X2");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X2");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'+'", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- testing loadfile", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "testloadfile");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "expres");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "res");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "res");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "expres");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- loading empty file", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "testloadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- loading file with initial comment without end of line", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "testloadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"# a non-ending comment\"", value: ImmutableArray.Create("# a non-ending comment"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- checking Unicode BOM in files", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "testloadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBB\\xBF# some comment\\nreturn 234\"", value: ImmutableArray.Create("﻿# some comment\nreturn 234"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "234", value: 234L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "testloadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBB\\xBFreturn 239\"", value: ImmutableArray.Create("﻿return 239"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "239", value: 239L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "testloadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBB\\xBF\"", value: ImmutableArray.Create("﻿"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- empty file with a BOM", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- checking line numbers in files with initial comments", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "testloadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"# a comment\\nreturn require'debug'.getinfo(1).currentline\"", value: ImmutableArray.Create("# a comment\nreturn require'debug'.getinfo(1).currentline"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- loading binary file", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"wb\"", value: ImmutableArray.Create("wb"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "dump");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\\0alo\\255'", value: ImmutableArray.Create<byte>(0, 97, 108, 111, 255));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'hi'", value: ImmutableArray.Create("hi"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0alo\\255\"", value: ImmutableArray.Create<byte>(0, 97, 108, 111, 255));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"hi\"", value: ImmutableArray.Create("hi"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- bug in 5.2.1", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"wb\"", value: ImmutableArray.Create("wb"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- save function with no upvalues", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "dump");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"b\"", value: ImmutableArray.Create("b"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"function\"", value: ImmutableArray.Create("function"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- loading binary file with initial comment", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"wb\"", value: ImmutableArray.Create("wb"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"#this is a comment for a binary file\\0\\n\"", value: ImmutableArray.Create("#this is a comment for a binary file\0\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "dump");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "20", value: 20L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\\0\\0\\0'", value: ImmutableArray.Create("\0\0\0"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "20", value: 20L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\\0\\0\"", value: ImmutableArray.Create("\0\0\0"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- 'loadfile' with 'env'", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'w'", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n    if (...) then a = 15; return b, c, d\n    else return _ENV\n    end\n  ]]", value: ImmutableArray.Create("    if (...) then a = 15; return b, c, d\n    else return _ENV\n    end\n  "U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "12", value: 12L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"xuxu\"", value: ImmutableArray.Create("xuxu"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'t'", value: ImmutableArray.Create("t"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "15", value: 15L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "12", value: 12L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'t'", value: ImmutableArray.Create("t"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- 'loadfile' x modes", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'w'", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"return 10\"", value: ImmutableArray.Create("return 10"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'b'", value: ImmutableArray.Create("b"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"a text chunk\"", value: ImmutableArray.Create("a text chunk"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'w'", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\27 return 10\"", value: ImmutableArray.Create("\u001B return 10"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "loadfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'t'", value: ImmutableArray.Create("t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"a binary chunk\"", value: ImmutableArray.Create("a binary chunk"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"qualquer coisa\\n\"", value: ImmutableArray.Create("qualquer coisa\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"mais qualquer coisa\"", value: ImmutableArray.Create("mais qualquer coisa"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'wb'", value: ImmutableArray.Create("wb"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"outra coisa\\0\\1\\3\\0\\0\\0\\0\\255\\0\"", value: ImmutableArray.Create<byte>(111, 117, 116, 114, 97, 32, 99, 111, 105, 115, 97, 0, 1, 3, 0, 0, 0, 0, 255, 0));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "filehandle");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'r+'", value: ImmutableArray.Create("r+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "otherfilehandle");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'rb'", value: ImmutableArray.Create("rb"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "filehandle");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.TildeEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "otherfilehandle");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "filehandle");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"userdata\"", value: ImmutableArray.Create("userdata"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "filehandle");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'l'", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"qualquer coisa\"", value: ImmutableArray.Create("qualquer coisa"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfilehandle");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.StringLiteralToken, text: "\"outra coisa\"", value: ImmutableArray.Create("outra coisa"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"outra coisa\"", value: ImmutableArray.Create("outra coisa"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "filehandle");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'l'", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"mais qualquer coisa\"", value: ImmutableArray.Create("mais qualquer coisa"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "filehandle");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "filehandle");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"userdata\"", value: ImmutableArray.Create("userdata"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfilehandle");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "4", value: 4L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\\1\\3\\0\"", value: ImmutableArray.Create("\0\u0001\u0003\0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "3", value: 3L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\\0\\0\"", value: ImmutableArray.Create("\0\0\0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- 255 is not eof", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\255\"", value: ImmutableArray.Create<byte>(255));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\"", value: ImmutableArray.Create("\0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfilehandle");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "otherfilehandle");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherfile");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n 123.4\t-56e-2  not a number\nsecond line\nthird line\n\nand the rest of the file\n]]", value: ImmutableArray.Create(" 123.4\t-56e-2  not a number\nsecond line\nthird line\n\nand the rest of the file\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "c");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "e");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "h");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "__");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'n'", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'n'", value: ImmutableArray.Create("n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'l'", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'l'", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'l'", value: ImmutableArray.Create("l"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "_");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "' '", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "__");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'number'", value: ImmutableArray.Create("number"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "123.4", value: 123.4D);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "56e-2", value: 0.56D);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'second line'", value: ImmutableArray.Create("second line"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "e");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'third line'", value: ImmutableArray.Create("third line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "h");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n\nand the rest of the file\n]]", value: ImmutableArray.Create("and the rest of the file\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "collectgarbage");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- testing buffers", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "setvbuf");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"full\"", value: ImmutableArray.Create("full"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2000", value: 2000L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"x\"", value: ImmutableArray.Create("x"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"all\"", value: ImmutableArray.Create("all"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- full buffer; output not written yet", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"all\"", value: ImmutableArray.Create("all"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"x\"", value: ImmutableArray.Create("x"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- `close' flushes it", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "setvbuf");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"no\"", value: ImmutableArray.Create("no"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"x\"", value: ImmutableArray.Create("x"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"all\"", value: ImmutableArray.Create("all"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"x\"", value: ImmutableArray.Create("x"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- no buffer; output is ready", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "setvbuf");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"line\"", value: ImmutableArray.Create("line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"x\"", value: ImmutableArray.Create("x"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"all\"", value: ImmutableArray.Create("all"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- line buffer; no output without `\\n'", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\\n\"", value: ImmutableArray.Create("a\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"all\"", value: ImmutableArray.Create("all"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"xa\\n\"", value: ImmutableArray.Create("xa\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- now we have a whole line", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "fr");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_soft");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"testing large files (> BUFSIZ)\"", value: ImmutableArray.Create("testing large files (> BUFSIZ)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "5001", value: 5001L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'0123456789123'", value: ImmutableArray.Create("0123456789123"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'\\n12346'", value: ImmutableArray.Create("\n12346"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'set'", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "30001", value: 30001L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1005", value: 1005L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "100003", value: 100003L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "len");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "5001", value: 5001L);
        V(SyntaxKind.AsteriskToken);
        V(SyntaxKind.NumericLiteralToken, text: "13", value: 13L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "6", value: 6L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'set'", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- huge line", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "'\\n'", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "input");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_port");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- get name of running executable", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OrKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "ARG");
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhileKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\"'", value: ImmutableArray.Create("\""U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\"'", value: ImmutableArray.Create("\""U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"testing popen/pclose and execute\"", value: ImmutableArray.Create("testing popen/pclose and execute"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- invalid mode for popen", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "popen");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"cat\"", value: ImmutableArray.Create("cat"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "popen");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"cat\"", value: ImmutableArray.Create("cat"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"r+\"", value: ImmutableArray.Create("r+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid mode\"", value: ImmutableArray.Create("invalid mode"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "popen");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"cat\"", value: ImmutableArray.Create("cat"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"rw\"", value: ImmutableArray.Create("rw"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- basic tests for popen", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "tmpname");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "popen");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cat - > \"", value: ImmutableArray.Create("cat - > "U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a line\"", value: ImmutableArray.Create("a line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "popen");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cat - < \"", value: ImmutableArray.Create("cat - < "U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"a line\"", value: ImmutableArray.Create("a line"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "file");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "tests");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- command,   what,  code", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"ls > /dev/null\"", value: ImmutableArray.Create("ls > /dev/null"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"ok\"", value: ImmutableArray.Create("ok"U8.ToArray()));
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"not-to-be-found-command\"", value: ImmutableArray.Create("not-to-be-found-command"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"exit\"", value: ImmutableArray.Create("exit"U8.ToArray()));
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"exit 3\"", value: ImmutableArray.Create("exit 3"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"exit\"", value: ImmutableArray.Create("exit"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "3", value: 3L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"exit 129\"", value: ImmutableArray.Create("exit 129"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"exit\"", value: ImmutableArray.Create("exit"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "129", value: 129L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"kill -s HUP $$\"", value: ImmutableArray.Create("kill -s HUP $$"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"signal\"", value: ImmutableArray.Create("signal"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"kill -s KILL $$\"", value: ImmutableArray.Create("kill -s KILL $$"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"signal\"", value: ImmutableArray.Create("signal"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "9", value: 9L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"sh -c 'kill -s HUP $$'\"", value: ImmutableArray.Create("sh -c 'kill -s HUP $$'"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"exit\"", value: ImmutableArray.Create("exit"U8.ToArray()));
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "' -e \" \"'", value: ImmutableArray.Create(" -e \" \""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"ok\"", value: ImmutableArray.Create("ok"U8.ToArray()));
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "' -e \"os.exit(0, true)\"'", value: ImmutableArray.Create(" -e \"os.exit(0, true)\""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"ok\"", value: ImmutableArray.Create("ok"U8.ToArray()));
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "' -e \"os.exit(20, true)\"'", value: ImmutableArray.Create(" -e \"os.exit(20, true)\""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"exit\"", value: ImmutableArray.Create("exit"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "20", value: 20L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n(some error messages are expected now)\"", value: ImmutableArray.Create("\n(some error messages are expected now)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "ipairs");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "tests");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "z");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "popen");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "x1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "y1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "z1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "execute");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "x1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "y1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "z");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "z1");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"ok\"", value: ImmutableArray.Create("ok"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'exit'", value: ImmutableArray.Create("exit"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "z");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ElseKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "y");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- correct status and 'what'", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- correct code if known (but always different from 0)", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "3", value: 3L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "z");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OrKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.NumericLiteralToken, text: "3", value: 3L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "z");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- testing tmpfile", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "tmpfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"file\"", value: ImmutableArray.Create("file"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo\"", value: ImmutableArray.Create("alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "seek");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"set\"", value: ImmutableArray.Create("set"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"alo\"", value: ImmutableArray.Create("alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "--}", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.StringLiteralToken, text: "'+'", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"testing date/time\"", value: ImmutableArray.Create("testing date/time"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"!\"", value: ImmutableArray.Create("!"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\\0\"", value: ImmutableArray.Create("\0\0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\\0\"", value: ImmutableArray.Create("\0\0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"!\\0\\0\"", value: ImmutableArray.Create("!\0\0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\\0\"", value: ImmutableArray.Create("\0\0"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "10000", value: 10000L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "x");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"*t\"", value: ImmutableArray.Create("*t"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%d\"", value: ImmutableArray.Create("%d"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%d\"", value: ImmutableArray.Create("%d"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%\"", value: ImmutableArray.Create("%"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "200", value: 200L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%\"", value: ImmutableArray.Create("%"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "100", value: 100L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkDateTable");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"*t\"", value: ImmutableArray.Create("*t"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[assert(D.year==%Y and D.month==%m and D.day==%d and\n    D.hour==%H and D.min==%M and D.sec==%S and\n    D.wday==%w+1 and D.yday==%j)]]", value: ImmutableArray.Create("assert(D.year==%Y and D.month==%m and D.day==%d and\n    D.hour==%H and D.min==%M and D.sec==%S and\n    D.wday==%w+1 and D.yday==%j)"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkDateTable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_port");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- assume that time_t can represent these values", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkDateTable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkDateTable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkDateTable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkDateTable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0x7fffffff", value: 2147483647L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkDateTable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0x80000000", value: 2147483648L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid conversion specifier\"", value: ImmutableArray.Create("invalid conversion specifier"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"%\"", value: ImmutableArray.Create("%"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid conversion specifier\"", value: ImmutableArray.Create("invalid conversion specifier"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"%9\"", value: ImmutableArray.Create("%9"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid conversion specifier\"", value: ImmutableArray.Create("invalid conversion specifier"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"%\"", value: ImmutableArray.Create("%"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid conversion specifier\"", value: ImmutableArray.Create("invalid conversion specifier"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"%O\"", value: ImmutableArray.Create("%O"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid conversion specifier\"", value: ImmutableArray.Create("invalid conversion specifier"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"%E\"", value: ImmutableArray.Create("%E"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"invalid conversion specifier\"", value: ImmutableArray.Create("invalid conversion specifier"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"%Ea\"", value: ImmutableArray.Create("%Ea"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"not an integer\"", value: ImmutableArray.Create("not an integer"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'x'", value: ImmutableArray.Create("x"U8.ToArray()));
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"not an integer\"", value: ImmutableArray.Create("not an integer"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1.5", value: 1.5D);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"missing\"", value: ImmutableArray.Create("missing"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "12", value: 12L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- missing date", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "packsize");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"i\"", value: ImmutableArray.Create("i"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "4", value: 4L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- 4-byte ints", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"field 'year' is out-of-bound\"", value: ImmutableArray.Create("field 'year' is out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1899", value: 1899L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"field 'year' is out-of-bound\"", value: ImmutableArray.Create("field 'year' is out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "math");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "maxinteger");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- larger lua_integer?", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"field 'year' is out-of-bound\"", value: ImmutableArray.Create("field 'year' is out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1900", value: 1900L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_port");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test Posix-specific modifiers", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%Ex\"", value: ImmutableArray.Create("%Ex"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'string'", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%Oy\"", value: ImmutableArray.Create("%Oy"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'string'", value: ImmutableArray.Create("string"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test large dates (assume at least 4-byte ints and time_t)", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t0");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1970", value: 1970L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1970", value: 1970L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "sec");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t0");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "t0");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1970", value: 1970L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1970", value: 1970L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "sec");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t0");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test out-of-range dates (at least for Unix)", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.GreaterThanEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "62", value: 62L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- cannot do these tests in Small Lua", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- no arith overflows", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"out-of-bound\"", value: ImmutableArray.Create("out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.IdentifierToken, text: "maxint");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "packsize");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"i\"", value: ImmutableArray.Create("i"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "4", value: 4L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- 4-byte ints", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "testerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"out-of-bound\"", value: ImmutableArray.Create("out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"%Y\"", value: ImmutableArray.Create("%Y"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "40", value: 40L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- time_t has 4 bytes and therefore cannot represent year 4000", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"  4-byte time_t\"", value: ImmutableArray.Create("  4-byte time_t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cannot be represented\"", value: ImmutableArray.Create("cannot be represented"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "4000", value: 4000L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ElseKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- time_t has 8 bytes; an int year cannot represent a huge time", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"  8-byte time_t\"", value: ImmutableArray.Create("  8-byte time_t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cannot be represented\"", value: ImmutableArray.Create("cannot be represented"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"%Y\"", value: ImmutableArray.Create("%Y"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "60", value: 60L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- this is the maximum year", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1899", value: 1899L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "12", value: 12L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "23", value: 23L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "59", value: 59L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "sec");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "59", value: 59L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- this is too much", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"represented\"", value: ImmutableArray.Create("represented"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1899", value: 1899L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "12", value: 12L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "23", value: 23L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "59", value: 59L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "sec");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "60", value: 60L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- internal 'int' fields cannot hold these values", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"field 'day' is out-of-bound\"", value: ImmutableArray.Create("field 'day' is out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "32", value: 32L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"field 'month' is out-of-bound\"", value: ImmutableArray.Create("field 'month' is out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"field 'year' is out-of-bound\"", value: ImmutableArray.Create("field 'year' is out-of-bound"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanLessThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1900", value: 1900L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ElseKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- 8-byte ints", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- assume time_t has 8 bytes too", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"  8-byte time_t\"", value: ImmutableArray.Create("  8-byte time_t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%Y\"", value: ImmutableArray.Create("%Y"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "60", value: 60L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- but still cannot represent a huge year", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "checkerr");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"cannot be represented\"", value: ImmutableArray.Create("cannot be represented"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "60", value: 60L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"*t\"", value: ImmutableArray.Create("*t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "isdst");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"no daylight saving information\"", value: ImmutableArray.Create("no daylight saving information"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ElseKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "type");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "isdst");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'boolean'", value: ImmutableArray.Create("boolean"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "isdst");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- if isdst is absent uses correct default", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"*t\"", value: ImmutableArray.Create("*t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "D");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- allow for leap years", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "math");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "abs");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "difftime");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SlashToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "24", value: 24L);
        V(SyntaxKind.AsteriskToken);
        V(SyntaxKind.NumericLiteralToken, text: "3600", value: 3600L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "365", value: 365L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- should not take more than 1 second to execute these two lines", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"*t\"", value: ImmutableArray.Create("*t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "diff");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "difftime");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "diff");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "diff");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "diff");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "difftime");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "diff");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "diff");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LessThanEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "2000", value: 2000L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "23", value: 23L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "12", value: 12L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t2");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "2000", value: 2000L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "23", value: 23L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "10", value: 10L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "sec");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "19", value: 19L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "difftime");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t2");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "60", value: 60L);
        V(SyntaxKind.AsteriskToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "19", value: 19L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- since 5.3.3, 'os.time' normalizes table fields", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2005", value: 2005L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "sec");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "3602", value: 3602L);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "time");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "day");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "31", value: 31L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "month");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "12", value: 12L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "year");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2004", value: 2004L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "hour");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "23", value: 23L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "59", value: 59L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "sec");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "58", value: 58L);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "t1");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "yday");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "366", value: 366L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "stdout");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "date");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'%d %m %Y %H %M %S'", value: ImmutableArray.Create("%d %m %Y %H %M %S"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "h");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "match");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.StringLiteralToken, text: "\"(%d+) (%d+) (%d+) (%d+) (%d+) (%d+)\"", value: ImmutableArray.Create("(%d+) (%d+) (%d+) (%d+) (%d+) (%d+)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "h");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "h");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "tonumber");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'test done on %2.2d/%2.2d/%d'", value: ImmutableArray.Create("test done on %2.2d/%2.2d/%d"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "d");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "', at %2.2d:%2.2d:%2.2d\\n'", value: ImmutableArray.Create(", at %2.2d:%2.2d:%2.2d\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "h");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "min");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'%s\\n'", value: ImmutableArray.Create("%s\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhitespaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_VERSION");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfFileToken);
    }
}
