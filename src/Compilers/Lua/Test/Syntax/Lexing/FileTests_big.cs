// Licensed to the Qtyi under one or more agreements.
// The Qtyi licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Qtyi.CodeAnalysis.Lua.Test.Utilities;

namespace Qtyi.CodeAnalysis.Lua.UnitTests.Lexing;

partial class FileTests
{
    private void TestOfficialTestFile_big(string source, SourceCodeKind kind)
    {
        var V = LexSource(source, options: TestOptions.RegularDefault.WithKind(kind));

        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "_soft");
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.StringLiteralToken, text: "\"testing large tables\"", value: ImmutableArray.Create("testing large tables"U8.ToArray()));
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "debug");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "require");
        V(SyntaxKind.StringLiteralToken, text: "\"debug\"", value: ImmutableArray.Create("debug"U8.ToArray()));
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "18", value: 18L);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.StringLiteralToken, text: "\"local y = {0\"", value: ImmutableArray.Create("local y = {0"U8.ToArray()));
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"}\\n\"", value: ImmutableArray.Create("}\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"X = y\\n\"", value: ImmutableArray.Create("X = y\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"assert(X[%d] == %d)\"", value: ImmutableArray.Create("assert(X[%d] == %d)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"return 0\"", value: ImmutableArray.Create("return 0"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "table");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "concat");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\";\"", value: ImmutableArray.Create(";"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "k");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "pairs");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "k");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "undef");
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "setmetatable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "__index");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "coroutine");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "yield");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'g'", value: ImmutableArray.Create("g"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "__newindex");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "coroutine");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "yield");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'s'", value: ImmutableArray.Create("s"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "co");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "coroutine");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "wrap");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "co");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'s'", value: ImmutableArray.Create("s"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "co");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'g'", value: ImmutableArray.Create("g"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "co");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "'g'", value: ImmutableArray.Create("g"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "co");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "getmetatable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "__index");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "getmetatable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "__newindex");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "e");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "e");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"global 'X'\"", value: ImmutableArray.Create("global 'X'"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "getmetatable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "__newindex");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "error");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"hi\"", value: ImmutableArray.Create("hi"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "e");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "xpcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "debug");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "traceback");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "e");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"'newindex'\"", value: ImmutableArray.Create("'newindex'"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.IdentifierToken, text: "coroutine");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "yield");
        V(SyntaxKind.StringLiteralToken, text: "'b'", value: ImmutableArray.Create("b"U8.ToArray()));
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "32", value: 32L);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.StringLiteralToken, text: "\"testing string length overflow\"", value: ImmutableArray.Create("testing string length overflow"U8.ToArray()));
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "repstrings");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "192", value: 192L);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "ssize");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "math");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "ceil");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "2.0", value: 2D);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "32", value: 32L);
        V(SyntaxKind.SlashToken);
        V(SyntaxKind.IdentifierToken, text: "repstrings");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "repstrings");
        V(SyntaxKind.AsteriskToken);
        V(SyntaxKind.IdentifierToken, text: "ssize");
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.NumericLiteralToken, text: "2.0", value: 2D);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "32", value: 32L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "longs");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\"", value: ImmutableArray.Create("\0"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "ssize");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"local a = ...; return \"", value: ImmutableArray.Create("local a = ...; return "U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "repstrings");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"..\"", value: ImmutableArray.Create(".."U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "longs");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"overflow\"", value: ImmutableArray.Create("overflow"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.StringLiteralToken, text: "'OK'", value: ImmutableArray.Create("OK"U8.ToArray()));
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.EndOfFileToken);
    }

    private void TestOfficialTestFileWithTrivia_big(string source, SourceCodeKind kind)
    {
        var V = LexSource(source, options: TestOptions.RegularDefault.WithKind(kind), withTrivia: true);

        V(SyntaxKind.SingleLineCommentTrivia, text: "-- $Id: testes/big.lua $", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- See Copyright Notice in file all.lua", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_soft");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"testing large tables\"", value: ImmutableArray.Create("testing large tables"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "debug");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "require");
        V(SyntaxKind.StringLiteralToken, text: "\"debug\"", value: ImmutableArray.Create("debug"U8.ToArray()));
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "18", value: 18L);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1000", value: 1000L);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"local y = {0\"", value: ImmutableArray.Create("local y = {0"U8.ToArray()));
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"}\\n\"", value: ImmutableArray.Create("}\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"X = y\\n\"", value: ImmutableArray.Create("X = y\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"assert(X[%d] == %d)\"", value: ImmutableArray.Create("assert(X[%d] == %d)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.HashToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"return 0\"", value: ImmutableArray.Create("return 0"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "table");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "concat");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\";\"", value: ImmutableArray.Create(";"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "k");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pairs");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "k");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "undef");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- yields during accesses larger than K (in RK)", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "setmetatable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "__index");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "coroutine");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "yield");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'g'", value: ImmutableArray.Create("g"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "__newindex");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "coroutine");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "yield");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'s'", value: ImmutableArray.Create("s"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_G");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "v");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "co");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "coroutine");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "wrap");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "co");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'s'", value: ImmutableArray.Create("s"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "co");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'g'", value: ImmutableArray.Create("g"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "co");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'g'", value: ImmutableArray.Create("g"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "co");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "lim");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- errors in accesses larger than K (in RK)", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "getmetatable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "__index");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "getmetatable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "__newindex");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "e");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "e");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"global 'X'\"", value: ImmutableArray.Create("global 'X'"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- errors in metamethods ", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "getmetatable");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "env");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "__newindex");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "error");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"hi\"", value: ImmutableArray.Create("hi"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "e");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "xpcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "debug");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "traceback");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "e");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "m");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"'newindex'\"", value: ImmutableArray.Create("'newindex'"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "X");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NilKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "coroutine");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "yield");
        V(SyntaxKind.StringLiteralToken, text: "'b'", value: ImmutableArray.Create("b"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "32", value: 32L);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- (small integers) {   ", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"testing string length overflow\"", value: ImmutableArray.Create("testing string length overflow"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "repstrings");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "192", value: 192L);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- number of strings to be concatenated", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "ssize");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "math");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "ceil");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NumericLiteralToken, text: "2.0", value: 2D);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "32", value: 32L);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SlashToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "repstrings");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- size of each string", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "repstrings");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AsteriskToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "ssize");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.GreaterThanToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2.0", value: 2D);
        V(SyntaxKind.CaretToken);
        V(SyntaxKind.NumericLiteralToken, text: "32", value: 32L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- it should be larger than maximum size", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "longs");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\0\"", value: ImmutableArray.Create("\0"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "ssize");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- create one long string", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- create function to concatenate 'repstrings' copies of its argument", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.StringLiteralToken, text: "\"local a = ...; return \"", value: ImmutableArray.Create("local a = ...; return "U8.ToArray()));
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "repstrings");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"..\"", value: ImmutableArray.Create(".."U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "longs");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- call that function", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- it should fail without creating string (result would be too large)", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "b");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"overflow\"", value: ImmutableArray.Create("overflow"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- }", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.StringLiteralToken, text: "'OK'", value: ImmutableArray.Create("OK"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'a'", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfFileToken);
    }
}
