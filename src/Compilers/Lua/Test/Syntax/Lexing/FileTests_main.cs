// Licensed to the Qtyi under one or more agreements.
// The Qtyi licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Qtyi.CodeAnalysis.Lua.Test.Utilities;

namespace Qtyi.CodeAnalysis.Lua.UnitTests.Lexing;

partial class FileTests
{
    private void TestOfficialTestFile_main(string source, SourceCodeKind kind)
    {
        var V = LexSource(source, options: TestOptions.RegularDefault.WithKind(kind));

        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "_port");
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"testing stand-alone interpreter\"", value: ImmutableArray.Create("testing stand-alone interpreter"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "execute");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.OrKeyword);
        V(SyntaxKind.IdentifierToken, text: "ARG");
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "tmpname");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "otherprog");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "tmpname");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "tmpname");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.WhileKeyword);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"progname: \"", value: ImmutableArray.Create("progname: "U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "mod");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "mod");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "mod");
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.StringLiteralToken, text: "\"wb\"", value: ImmutableArray.Create("wb"U8.ToArray()));
        V(SyntaxKind.OrKeyword);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.OrKeyword);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "mod");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "checkprogout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "sub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "line");
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "gmatch");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\".-\\n\"", value: ImmutableArray.Create(".-\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "line");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.TildeEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"'%s' - '%s'\\n\"", value: ImmutableArray.Create("'%s' - '%s'\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "gsub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua\"", value: ImmutableArray.Create("lua"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'\"'", value: ImmutableArray.Create("\""U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "'\"'", value: ImmutableArray.Create("\""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "execute");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "gsub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua\"", value: ImmutableArray.Create("lua"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'\"'", value: ImmutableArray.Create("\""U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "'\"'", value: ImmutableArray.Create("\""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%s >%s 2>&1\"", value: ImmutableArray.Create("%s >%s 2>&1"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "execute");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua -v'", value: ImmutableArray.Create("lua -v"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"(temporary program file used in these tests: %s)\"", value: ImmutableArray.Create("(temporary program file used in these tests: %s)"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua - < %s > %s'", value: ImmutableArray.Create("lua - < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n  print(\n1, a\n)\n]]", value: ImmutableArray.Create("  print(\n1, a\n)\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua - < %s > %s'", value: ImmutableArray.Create("lua - < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"1\\tnil\\n\"", value: ImmutableArray.Create("1\tnil\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'echo \"print(10)\\nprint(2)\\n\" | lua > %s'", value: ImmutableArray.Create("echo \"print(10)\nprint(2)\n\" | lua > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"10\\n2\\n\"", value: ImmutableArray.Create("10\n2\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBB\\xBF\"", value: ImmutableArray.Create("﻿"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s > %s'", value: ImmutableArray.Create("lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBB\\xBFprint(3)\"", value: ImmutableArray.Create("﻿print(3)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s > %s'", value: ImmutableArray.Create("lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"3\\n\"", value: ImmutableArray.Create("3\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBB\\xBF# comment!!\\nprint(3)\"", value: ImmutableArray.Create("﻿# comment!!\nprint(3)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s > %s'", value: ImmutableArray.Create("lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"3\\n\"", value: ImmutableArray.Create("3\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\"", value: ImmutableArray.Create<byte>(239));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unexpected symbol\"", value: ImmutableArray.Create("unexpected symbol"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBB\"", value: ImmutableArray.Create<byte>(239, 187));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unexpected symbol\"", value: ImmutableArray.Create("unexpected symbol"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEFprint(3)\"", value: ImmutableArray.Create<byte>(239, 112, 114, 105, 110, 116, 40, 51, 41));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unexpected symbol\"", value: ImmutableArray.Create("unexpected symbol"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBBprint(3)\"", value: ImmutableArray.Create<byte>(239, 187, 112, 114, 105, 110, 116, 40, 51, 41));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unexpected symbol\"", value: ImmutableArray.Create("unexpected symbol"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'echo \"print(arg[1])\" | lua - -h > %s'", value: ImmutableArray.Create("echo \"print(arg[1])\" | lua - -h > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"-h\\n\"", value: ImmutableArray.Create("-h\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(package.path)\"", value: ImmutableArray.Create("print(package.path)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT= LUA_PATH=x lua %s > %s'", value: ImmutableArray.Create("env LUA_INIT= LUA_PATH=x lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"x\\n\"", value: ImmutableArray.Create("x\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT= LUA_PATH_5_4=y LUA_PATH=x lua %s > %s'", value: ImmutableArray.Create("env LUA_INIT= LUA_PATH_5_4=y LUA_PATH=x lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"y\\n\"", value: ImmutableArray.Create("y\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(package.cpath)\"", value: ImmutableArray.Create("print(package.cpath)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT= LUA_CPATH=xuxu lua %s > %s'", value: ImmutableArray.Create("env LUA_INIT= LUA_CPATH=xuxu lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"xuxu\\n\"", value: ImmutableArray.Create("xuxu\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT= LUA_CPATH_5_4=yacc LUA_CPATH=x lua %s > %s'", value: ImmutableArray.Create("env LUA_INIT= LUA_CPATH_5_4=yacc LUA_CPATH=x lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"yacc\\n\"", value: ImmutableArray.Create("yacc\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(X)\"", value: ImmutableArray.Create("print(X)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT=\"X=tonumber(arg[1])\" lua %s 3.2 > %s'", value: ImmutableArray.Create("env LUA_INIT=\"X=tonumber(arg[1])\" lua %s 3.2 > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"3.2\\n\"", value: ImmutableArray.Create("3.2\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(X)\"", value: ImmutableArray.Create("print(X)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT_5_4=\"X=10\" LUA_INIT=\"X=3\" lua %s > %s'", value: ImmutableArray.Create("env LUA_INIT_5_4=\"X=10\" LUA_INIT=\"X=3\" lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"10\\n\"", value: ImmutableArray.Create("10\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"x = x or 10; print(x); x = x + 1\"", value: ImmutableArray.Create("x = x or 10; print(x); x = x + 1"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT=\"@%s\" lua %s > %s'", value: ImmutableArray.Create("env LUA_INIT=\"@%s\" lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"10\\n11\\n\"", value: ImmutableArray.Create("10\n11\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'LUA_INIT:1: msg'", value: ImmutableArray.Create("LUA_INIT:1: msg"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT=\"error(\\'msg\\')\" lua'", value: ImmutableArray.Create("env LUA_INIT=\"error('msg')\" lua"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "defaultpath");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "defaultCpath");
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(package.path, package.cpath)\"", value: ImmutableArray.Create("print(package.path, package.cpath)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT=\"error(10)\" LUA_PATH=xxx LUA_CPATH=xxx lua -E %s > %s'", value: ImmutableArray.Create("env LUA_INIT=\"error(10)\" LUA_PATH=xxx LUA_CPATH=xxx lua -E %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "defaultpath");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "match");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"^(.-)\\t\"", value: ImmutableArray.Create("^(.-)\t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "defaultCpath");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "match");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\t(.-)$\"", value: ImmutableArray.Create("\t(.-)$"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env -i lua %s > %s'", value: ImmutableArray.Create("env -i lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "defaultpath");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "match");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"^(.-)\\t\"", value: ImmutableArray.Create("^(.-)\t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "defaultCpath");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "match");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\t(.-)$\"", value: ImmutableArray.Create("\t(.-)$"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "defaultpath");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"xxx\"", value: ImmutableArray.Create("xxx"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "defaultpath");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua\"", value: ImmutableArray.Create("lua"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "defaultCpath");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"xxx\"", value: ImmutableArray.Create("xxx"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "defaultCpath");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua\"", value: ImmutableArray.Create("lua"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "convert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(package.path)\"", value: ImmutableArray.Create("print(package.path)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_PATH=\"%s\" lua %s > %s'", value: ImmutableArray.Create("env LUA_PATH=\"%s\" lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "expected");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "expected");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "sub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "expected");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\";;\"", value: ImmutableArray.Create(";;"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "gsub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\";;\"", value: ImmutableArray.Create(";;"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\";\"", value: ImmutableArray.Create(";"U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "defaultpath");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "\";\"", value: ImmutableArray.Create(";"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "gsub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"^;\"", value: ImmutableArray.Create("^;"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "gsub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\";$\"", value: ImmutableArray.Create(";$"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.IdentifierToken, text: "expected");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "convert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\";\"", value: ImmutableArray.Create(";"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "convert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\";;\"", value: ImmutableArray.Create(";;"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "convert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a;;b\"", value: ImmutableArray.Create("a;;b"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "convert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\";;b\"", value: ImmutableArray.Create(";;b"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "convert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a;;\"", value: ImmutableArray.Create("a;;"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "convert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a;b;;c\"", value: ImmutableArray.Create("a;b;;c"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(1); a=2; return {x=15}\"", value: ImmutableArray.Create("print(1); a=2; return {x=15}"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(a); print(_G['%s'].x)\"", value: ImmutableArray.Create("print(a); print(_G['%s'].x)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.FalseKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "otherprog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_PATH=\"?;;\" lua -l %s -l%s -lstring -l io %s > %s'", value: ImmutableArray.Create("env LUA_PATH=\"?;;\" lua -l %s -l%s -lstring -l io %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "otherprog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "otherprog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"1\\n2\\n15\\n2\\n15\\n\"", value: ImmutableArray.Create("1\n2\n15\n2\n15\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(str.upper'alo alo', m.max(10, 20))\"", value: ImmutableArray.Create("print(str.upper'alo alo', m.max(10, 20))"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -l 'str=string' '-lm=math' -e 'print(m.sin(0))' %s > %s\"", value: ImmutableArray.Create("lua -l 'str=string' '-lm=math' -e 'print(m.sin(0))' %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"0.0\\nALO ALO\\t20\\n\"", value: ImmutableArray.Create("0.0\nALO ALO\t20\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"env LUA_CPATH='./libs/?.so' lua -l lib2-v2 -e 'print(lib2.id())' > %s\"", value: ImmutableArray.Create("env LUA_CPATH='./libs/?.so' lua -l lib2-v2 -e 'print(lib2.id())' > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"true\\n\"", value: ImmutableArray.Create("true\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n  assert(#arg == 3 and arg[1] == 'a' and\n         arg[2] == 'b' and arg[3] == 'c')\n  assert(arg[-1] == '--' and arg[-2] == \"-e \" and arg[-3] == '%s')\n  assert(arg[4] == undef and arg[-4] == undef)\n  local a, b, c = ...\n  assert(... == 'a' and a == 'a' and b == 'b' and c == 'c')\n]]", value: ImmutableArray.Create("  assert(#arg == 3 and arg[1] == 'a' and\n         arg[2] == 'b' and arg[3] == 'c')\n  assert(arg[-1] == '--' and arg[-2] == \"-e \" and arg[-3] == '%s')\n  assert(arg[4] == undef and arg[-4] == undef)\n  local a, b, c = ...\n  assert(... == 'a' and a == 'a' and b == 'b' and c == 'c')\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua \"-e \" -- %s a b c'", value: ImmutableArray.Create("lua \"-e \" -- %s a b c"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.StringLiteralToken, text: "\"assert(arg)\"", value: ImmutableArray.Create("assert(arg)"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"assert(arg)\"", value: ImmutableArray.Create("assert(arg)"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.FalseKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "otherprog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_PATH=\"?;;\" lua -l%s - < %s'", value: ImmutableArray.Create("env LUA_PATH=\"?;;\" lua -l%s - < %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "otherprog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'echo \"print(...)\" | lua -e \"arg[1] = 100\" - > %s'", value: ImmutableArray.Create("echo \"print(...)\" | lua -e \"arg[1] = 100\" - > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"100\\n\"", value: ImmutableArray.Create("100\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"'arg' is not a table\"", value: ImmutableArray.Create("'arg' is not a table"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'echo \"\" | lua -e \"arg = 1\" -'", value: ImmutableArray.Create("echo \"\" | lua -e \"arg = 1\" -"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'echo 10 | lua -e \"print=nil\" -i > /dev/null 2> %s'", value: ImmutableArray.Create("echo 10 | lua -e \"print=nil\" -i > /dev/null 2> %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"error calling 'print'\"", value: ImmutableArray.Create("error calling 'print'"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'echo \"io.stderr:write(1000)\\ncont\" | lua -e \"require\\'debug\\'.debug()\" 2> %s'", value: ImmutableArray.Create("echo \"io.stderr:write(1000)\ncont\" | lua -e \"require'debug'.debug()\" 2> %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua_debug> 1000lua_debug> \"", value: ImmutableArray.Create("lua_debug> 1000lua_debug> "U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"testing warnings\"", value: ImmutableArray.Create("testing warnings"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'echo \"io.stderr:write(1); warn[[XXX]]\" | lua 2> %s'", value: ImmutableArray.Create("echo \"io.stderr:write(1); warn[[XXX]]\" | lua 2> %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"1\"", value: ImmutableArray.Create("1"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\nwarn(\"@allow\")               -- unknown control, ignored\nwarn(\"@off\", \"XXX\", \"@off\")  -- these are not control messages\nwarn(\"@off\")                 -- this one is\nwarn(\"@on\", \"YYY\", \"@on\")    -- not control, but warn is off\nwarn(\"@off\")                 -- keep it off\nwarn(\"@on\")                  -- restart warnings\nwarn(\"\", \"@on\")              -- again, no control, real warning\nwarn(\"@on\")                  -- keep it \"started\"\nwarn(\"Z\", \"Z\", \"Z\")          -- common warning\n]]", value: ImmutableArray.Create("warn(\"@allow\")               -- unknown control, ignored\nwarn(\"@off\", \"XXX\", \"@off\")  -- these are not control messages\nwarn(\"@off\")                 -- this one is\nwarn(\"@on\", \"YYY\", \"@on\")    -- not control, but warn is off\nwarn(\"@off\")                 -- keep it off\nwarn(\"@on\")                  -- restart warnings\nwarn(\"\", \"@on\")              -- again, no control, real warning\nwarn(\"@on\")                  -- keep it \"started\"\nwarn(\"Z\", \"Z\", \"Z\")          -- common warning\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua -W %s 2> %s'", value: ImmutableArray.Create("lua -W %s 2> %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\nLua warning: @offXXX@off\nLua warning: @on\nLua warning: ZZZ\n]]", value: ImmutableArray.Create("Lua warning: @offXXX@off\nLua warning: @on\nLua warning: ZZZ\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\nwarn(\"@allow\")\n-- create two objects to be finalized when closing state\n-- the errors in the finalizers must generate warnings\nu1 = setmetatable({}, {__gc = function () error(\"XYZ\") end})\nu2 = setmetatable({}, {__gc = function () error(\"ZYX\") end})\n]]", value: ImmutableArray.Create("warn(\"@allow\")\n-- create two objects to be finalized when closing state\n-- the errors in the finalizers must generate warnings\nu1 = setmetatable({}, {__gc = function () error(\"XYZ\") end})\nu2 = setmetatable({}, {__gc = function () error(\"ZYX\") end})\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua -W %s 2> %s'", value: ImmutableArray.Create("lua -W %s 2> %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkprogout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"ZYX)\\nXYZ)\\n\"", value: ImmutableArray.Create("ZYX)\nXYZ)\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n-- should be called last\nprint(\"creating 1\")\nsetmetatable({}, {__gc = function () print(1) end})\n\nprint(\"creating 2\")\nsetmetatable({}, {__gc = function ()\n  print(\"2\")\n  print(\"creating 3\")\n  -- this finalizer should not be called, as object will be\n  -- created after 'lua_close' has been called\n  setmetatable({}, {__gc = function () print(3) end})\n  print(collectgarbage())    -- cannot call collector here\n  os.exit(0, true)\nend})\n]]", value: ImmutableArray.Create("-- should be called last\nprint(\"creating 1\")\nsetmetatable({}, {__gc = function () print(1) end})\n\nprint(\"creating 2\")\nsetmetatable({}, {__gc = function ()\n  print(\"2\")\n  print(\"creating 3\")\n  -- this finalizer should not be called, as object will be\n  -- created after 'lua_close' has been called\n  setmetatable({}, {__gc = function () print(3) end})\n  print(collectgarbage())    -- cannot call collector here\n  os.exit(0, true)\nend})\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua -W %s > %s'", value: ImmutableArray.Create("lua -W %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\ncreating 1\ncreating 2\n2\ncreating 3\nnil\n1\n]]", value: ImmutableArray.Create("creating 1\ncreating 2\n2\ncreating 3\nnil\n1\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[print(({...})[30])]]", value: ImmutableArray.Create("print(({...})[30])"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s %s > %s'", value: ImmutableArray.Create("lua %s %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\" a\"", value: ImmutableArray.Create(" a"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "30", value: 30L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\\n\"", value: ImmutableArray.Create("a\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua \"-eprint(1)\" -ea=3 -e \"print(a)\" > %s]]", value: ImmutableArray.Create("lua \"-eprint(1)\" -ea=3 -e \"print(a)\" > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"1\\n3\\n\"", value: ImmutableArray.Create("1\n3\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n(6*2-6) -- ===\na =\n10\nprint(a)\na]]", value: ImmutableArray.Create("(6*2-6) -- ===\na =\n10\nprint(a)\na"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]", value: ImmutableArray.Create("lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkprogout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"6\\n10\\n10\\n\\n\"", value: ImmutableArray.Create("6\n10\n10\n\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a = [[b\\nc\\nd\\ne]]\\n=a\"", value: ImmutableArray.Create("a = [[b\nc\nd\ne]]\n=a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]", value: ImmutableArray.Create("lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkprogout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"b\\nc\\nd\\ne\\n\\n\"", value: ImmutableArray.Create("b\nc\nd\ne\n\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"alo\"", value: ImmutableArray.Create("alo"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[ --\na = 2\n]]", value: ImmutableArray.Create(" --\na = 2\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua \"-e_PROMPT='%s'\" -i < %s > %s]]", value: ImmutableArray.Create("lua \"-e_PROMPT='%s'\" -i < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "\".*\"", value: ImmutableArray.Create(".*"U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "\".*\"", value: ImmutableArray.Create(".*"U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[ --\na = 2\n]]", value: ImmutableArray.Create(" --\na = 2\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua -i < %s > %s]]", value: ImmutableArray.Create("lua -i < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"> \"", value: ImmutableArray.Create("> "U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "\".*\"", value: ImmutableArray.Create(".*"U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "\".*\"", value: ImmutableArray.Create(".*"U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"local C = 0;\\z\n   _PROMPT=setmetatable({},{__tostring = function () \\z\n     C = C + 1; return C end})\"", value: ImmutableArray.Create("local C = 0;_PROMPT=setmetatable({},{__tostring = function () C = C + 1; return C end})"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[ --\na = 2\n]]", value: ImmutableArray.Create(" --\na = 2\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua -e \"%s\" -i < %s > %s]]", value: ImmutableArray.Create("lua -e \"%s\" -i < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n1 --\n2a = 2\n3\n]]", value: ImmutableArray.Create("1 --\n2a = 2\n3\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\ndebug = require \"debug\"\nm = {x=0}\nsetmetatable(m, {__tostring = function(x)\n  return tostring(debug.getinfo(4).currentline + x.x)\nend})\nerror(m)\n]]", value: ImmutableArray.Create("debug = require \"debug\"\nm = {x=0}\nsetmetatable(m, {__tostring = function(x)\n  return tostring(debug.getinfo(4).currentline + x.x)\nend})\nerror(m)\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "\": 6\\n\"", value: ImmutableArray.Create(": 6\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua %s]]", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"error{}\"", value: ImmutableArray.Create("error{}"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"error object is a table value\"", value: ImmutableArray.Create("error object is a table value"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua %s]]", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[=[ --\nfunction f ( x )\n  local a = [[\nxuxu\n]]\n  local b = \"\\\nxuxu\\n\"\n  if x == 11 then return 1 + 12 , 2 + 20 end  --[[ test multiple returns ]]\n  return x + 1\n  --\\\\\nend\nreturn( f( 100 ) )\nassert( a == b )\ndo return f( 11 ) end  ]=]", value: ImmutableArray.Create(" --\nfunction f ( x )\n  local a = [[\nxuxu\n]]\n  local b = \"\\\nxuxu\\n\"\n  if x == 11 then return 1 + 12 , 2 + 20 end  --[[ test multiple returns ]]\n  return x + 1\n  --\\\\\nend\nreturn( f( 100 ) )\nassert( a == b )\ndo return f( 11 ) end  "U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "gsub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "' '", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "'\\n\\n'", value: ImmutableArray.Create("\n\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]", value: ImmutableArray.Create("lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkprogout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"101\\n13\\t22\\n\\n\"", value: ImmutableArray.Create("101\n13\t22\n\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[#comment in 1st line without \\n at the end]]", value: ImmutableArray.Create("#comment in 1st line without \\n at the end"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"#comment\\n\"", value: ImmutableArray.Create("#comment\n"U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "dump");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(3)\"", value: ImmutableArray.Create("print(3)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s > %s'", value: ImmutableArray.Create("lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'3\\n'", value: ImmutableArray.Create("3\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[io.output(%q); io.write('alo')]]", value: ImmutableArray.Create("io.output(%q); io.write('alo')"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'alo'", value: ImmutableArray.Create("alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua -v  -e\"print'hello'\" > %s]]", value: ImmutableArray.Create("lua -v  -e\"print'hello'\" > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"PUC%-Rio\\nhello\"", value: ImmutableArray.Create("PUC%-Rio\nhello"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"os.exit(nil, true)\"", value: ImmutableArray.Create("os.exit(nil, true)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"os.exit(0, true)\"", value: ImmutableArray.Create("os.exit(0, true)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"os.exit(true, true)\"", value: ImmutableArray.Create("os.exit(true, true)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"os.exit(1, true)\"", value: ImmutableArray.Create("os.exit(1, true)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua %s\"", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"os.exit(false, true)\"", value: ImmutableArray.Create("os.exit(false, true)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua %s\"", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n  local x <close> = setmetatable({},\n        {__close = function (self, err)\n                     assert(err == nil)\n                     print(\"Ok\")\n                   end})\n  local e1 <close> = setmetatable({}, {__close = function () print(120) end})\n  os.exit(true, true)\n]]", value: ImmutableArray.Create("  local x <close> = setmetatable({},\n        {__close = function (self, err)\n                     assert(err == nil)\n                     print(\"Ok\")\n                   end})\n  local e1 <close> = setmetatable({}, {__close = function () print(120) end})\n  os.exit(true, true)\n"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s > %s'", value: ImmutableArray.Create("lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "checkprogout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"120\\nOk\\n\"", value: ImmutableArray.Create("120\nOk\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherprog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unrecognized option '-h'\"", value: ImmutableArray.Create("unrecognized option '-h'"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -h\"", value: ImmutableArray.Create("lua -h"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unrecognized option '---'\"", value: ImmutableArray.Create("unrecognized option '---'"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua ---\"", value: ImmutableArray.Create("lua ---"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unrecognized option '-Ex'\"", value: ImmutableArray.Create("unrecognized option '-Ex'"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -Ex\"", value: ImmutableArray.Create("lua -Ex"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unrecognized option '-vv'\"", value: ImmutableArray.Create("unrecognized option '-vv'"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -vv\"", value: ImmutableArray.Create("lua -vv"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unrecognized option '-iv'\"", value: ImmutableArray.Create("unrecognized option '-iv'"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -iv\"", value: ImmutableArray.Create("lua -iv"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"'-e' needs argument\"", value: ImmutableArray.Create("'-e' needs argument"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -e\"", value: ImmutableArray.Create("lua -e"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"syntax error\"", value: ImmutableArray.Create("syntax error"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -e a\"", value: ImmutableArray.Create("lua -e a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"'-l' needs argument\"", value: ImmutableArray.Create("'-l' needs argument"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -l\"", value: ImmutableArray.Create("lua -l"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.IdentifierToken, text: "T");
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"testing 'not enough memory' to create a state\"", value: ImmutableArray.Create("testing 'not enough memory' to create a state"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"not enough memory\"", value: ImmutableArray.Create("not enough memory"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"env MEMLIMIT=100 lua\"", value: ImmutableArray.Create("env MEMLIMIT=100 lua"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "warn");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"@store\"", value: ImmutableArray.Create("@store"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "warn");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"@123\"", value: ImmutableArray.Create("@123"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"456\"", value: ImmutableArray.Create("456"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"789\"", value: ImmutableArray.Create("789"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "_WARN");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"@123456789\"", value: ImmutableArray.Create("@123456789"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "_WARN");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.FalseKeyword);
        V(SyntaxKind.IdentifierToken, text: "warn");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"zip\"", value: ImmutableArray.Create("zip"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\" \"", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"zap\"", value: ImmutableArray.Create("zap"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "_WARN");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"zip zap\"", value: ImmutableArray.Create("zip zap"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "_WARN");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.FalseKeyword);
        V(SyntaxKind.IdentifierToken, text: "warn");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"ZIP\"", value: ImmutableArray.Create("ZIP"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\" \"", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"ZAP\"", value: ImmutableArray.Create("ZAP"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "_WARN");
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"ZIP ZAP\"", value: ImmutableArray.Create("ZIP ZAP"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.IdentifierToken, text: "_WARN");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.FalseKeyword);
        V(SyntaxKind.IdentifierToken, text: "warn");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"@normal\"", value: ImmutableArray.Create("@normal"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "st");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "warn");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"string expected\"", value: ImmutableArray.Create("string expected"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "st");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "warn");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"SHOULD NOT APPEAR\"", value: ImmutableArray.Create("SHOULD NOT APPEAR"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"string expected\"", value: ImmutableArray.Create("string expected"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'+'", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'testing Ctrl C'", value: ImmutableArray.Create("testing Ctrl C"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "kill");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "execute");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'kill -INT %s 2> /dev/null'", value: ImmutableArray.Create("kill -INT %s 2> /dev/null"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.IdentifierToken, text: "runback");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "luaprg");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "shellprg");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'%s -e \"%s\" & echo $!'", value: ImmutableArray.Create("%s -e \"%s\" & echo $!"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "luaprg");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "popen");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "shellprg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"(if test fails now, it may leave a Lua script running in \\z\n            background, pid \"", value: ImmutableArray.Create("(if test fails now, it may leave a Lua script running in background, pid "U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "\")\"", value: ImmutableArray.Create(")"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "runback");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n    pcall(function () print(12); while true do end end); print(42)]]", value: ImmutableArray.Create("    pcall(function () print(12); while true do end end); print(42)"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"12\"", value: ImmutableArray.Create("12"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "kill");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"42\"", value: ImmutableArray.Create("42"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"done\"", value: ImmutableArray.Create("done"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "runback");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n    print(15); string.find(string.rep('a', 100000), '.*b')]]", value: ImmutableArray.Create("    print(15); string.find(string.rep('a', 100000), '.*b')"U8.ToArray()));
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.StringLiteralToken, text: "\"15\"", value: ImmutableArray.Create("15"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "execute");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"sleep 1\"", value: ImmutableArray.Create("sleep 1"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "100", value: 100L);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.NumericLiteralToken, text: "100", value: 100L);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.IdentifierToken, text: "kill");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.BreakKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.GreaterThanEqualsToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"done (with %d kills)\"", value: ImmutableArray.Create("done (with %d kills)"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"OK\"", value: ImmutableArray.Create("OK"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfFileToken);
    }

    private void TestOfficialTestFileWithTrivia_main(string source, SourceCodeKind kind)
    {
        var V = LexSource(source, options: TestOptions.RegularDefault.WithKind(kind), withTrivia: true);

        V(kind == SourceCodeKind.Script ? SyntaxKind.CommentDirectiveTrivia : SyntaxKind.BadDirectiveTrivia, text: "# testing special comment on first line", location: TriviaLocation.Leading);
        {
            V(SyntaxKind.HashToken);
            V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
            if (kind == SourceCodeKind.Script)
            {
                V(SyntaxKind.PreprocessingMessageTrivia, text: "testing special comment on first line", location: TriviaLocation.Leading);
            }
            else
            {
                V(SyntaxKind.SkippedTokensTrivia, text: "testing special comment on first line", location: TriviaLocation.Leading);
                {
                    V(SyntaxKind.BadToken, text: "testing special comment on first line");
                }
            }
            V(SyntaxKind.EndOfDirectiveToken);
            V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        }
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- $Id: testes/main.lua $", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- See Copyright Notice in file all.lua", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- most (all?) tests here assume a reasonable \"Unix-like\" shell", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_port");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- use only \"double quotes\" inside shell scripts (better change to", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- run on Windows)", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"testing stand-alone interpreter\"", value: ImmutableArray.Create("testing stand-alone interpreter"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "execute");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- machine has a system command", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OrKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "ARG");
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "tmpname");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "otherprog");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "tmpname");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "tmpname");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhileKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "arg");
        V(SyntaxKind.OpenBracketToken);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.PlusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseBracketToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"progname: \"", value: ImmutableArray.Create("progname: "U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "mod");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "mod");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "mod");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"wb\"", value: ImmutableArray.Create("wb"U8.ToArray()));
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OrKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"w\"", value: ImmutableArray.Create("w"U8.ToArray()));
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- mod true means binary files", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OrKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- file to write the program", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "mod");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "write");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "open");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\"", value: ImmutableArray.Create("a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkprogout");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- expected result must end with new line", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "sub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\n\"", value: ImmutableArray.Create("\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "line");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.InKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "gmatch");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\".-\\n\"", value: ImmutableArray.Create(".-\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "line");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.TildeEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"'%s' - '%s'\\n\"", value: ImmutableArray.Create("'%s' - '%s'\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "gsub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lua\"", value: ImmutableArray.Create("lua"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\"'", value: ImmutableArray.Create("\""U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "'\"'", value: ImmutableArray.Create("\""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "execute");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "gsub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lua\"", value: ImmutableArray.Create("lua"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\"'", value: ImmutableArray.Create("\""U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "'\"'", value: ImmutableArray.Create("\""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotDotToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"%s >%s 2>&1\"", value: ImmutableArray.Create("%s >%s 2>&1"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- send output and error to 'out'", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "execute");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- check error message", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua -v'", value: ImmutableArray.Create("lua -v"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"(temporary program file used in these tests: %s)\"", value: ImmutableArray.Create("(temporary program file used in these tests: %s)"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- running stdin as a file", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua - < %s > %s'", value: ImmutableArray.Create("lua - < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n  print(\n1, a\n)\n]]", value: ImmutableArray.Create("  print(\n1, a\n)\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua - < %s > %s'", value: ImmutableArray.Create("lua - < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"1\\tnil\\n\"", value: ImmutableArray.Create("1\tnil\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'echo \"print(10)\\nprint(2)\\n\" | lua > %s'", value: ImmutableArray.Create("echo \"print(10)\nprint(2)\n\" | lua > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"10\\n2\\n\"", value: ImmutableArray.Create("10\n2\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- testing BOM", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBB\\xBF\"", value: ImmutableArray.Create("﻿"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s > %s'", value: ImmutableArray.Create("lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBB\\xBFprint(3)\"", value: ImmutableArray.Create("﻿print(3)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s > %s'", value: ImmutableArray.Create("lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"3\\n\"", value: ImmutableArray.Create("3\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBB\\xBF# comment!!\\nprint(3)\"", value: ImmutableArray.Create("﻿# comment!!\nprint(3)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s > %s'", value: ImmutableArray.Create("lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"3\\n\"", value: ImmutableArray.Create("3\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- bad BOMs", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\"", value: ImmutableArray.Create<byte>(239));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unexpected symbol\"", value: ImmutableArray.Create("unexpected symbol"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBB\"", value: ImmutableArray.Create<byte>(239, 187));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unexpected symbol\"", value: ImmutableArray.Create("unexpected symbol"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEFprint(3)\"", value: ImmutableArray.Create<byte>(239, 112, 114, 105, 110, 116, 40, 51, 41));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unexpected symbol\"", value: ImmutableArray.Create("unexpected symbol"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\\xEF\\xBBprint(3)\"", value: ImmutableArray.Create<byte>(239, 187, 112, 114, 105, 110, 116, 40, 51, 41));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unexpected symbol\"", value: ImmutableArray.Create("unexpected symbol"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test option '-'", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'echo \"print(arg[1])\" | lua - -h > %s'", value: ImmutableArray.Create("echo \"print(arg[1])\" | lua - -h > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"-h\\n\"", value: ImmutableArray.Create("-h\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test environment variables used by Lua", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(package.path)\"", value: ImmutableArray.Create("print(package.path)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test LUA_PATH", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT= LUA_PATH=x lua %s > %s'", value: ImmutableArray.Create("env LUA_INIT= LUA_PATH=x lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"x\\n\"", value: ImmutableArray.Create("x\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test LUA_PATH_version", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT= LUA_PATH_5_4=y LUA_PATH=x lua %s > %s'", value: ImmutableArray.Create("env LUA_INIT= LUA_PATH_5_4=y LUA_PATH=x lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"y\\n\"", value: ImmutableArray.Create("y\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test LUA_CPATH", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(package.cpath)\"", value: ImmutableArray.Create("print(package.cpath)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT= LUA_CPATH=xuxu lua %s > %s'", value: ImmutableArray.Create("env LUA_INIT= LUA_CPATH=xuxu lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"xuxu\\n\"", value: ImmutableArray.Create("xuxu\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test LUA_CPATH_version", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT= LUA_CPATH_5_4=yacc LUA_CPATH=x lua %s > %s'", value: ImmutableArray.Create("env LUA_INIT= LUA_CPATH_5_4=yacc LUA_CPATH=x lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"yacc\\n\"", value: ImmutableArray.Create("yacc\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test LUA_INIT (and its access to 'arg' table)", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(X)\"", value: ImmutableArray.Create("print(X)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT=\"X=tonumber(arg[1])\" lua %s 3.2 > %s'", value: ImmutableArray.Create("env LUA_INIT=\"X=tonumber(arg[1])\" lua %s 3.2 > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"3.2\\n\"", value: ImmutableArray.Create("3.2\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test LUA_INIT_version", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(X)\"", value: ImmutableArray.Create("print(X)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT_5_4=\"X=10\" LUA_INIT=\"X=3\" lua %s > %s'", value: ImmutableArray.Create("env LUA_INIT_5_4=\"X=10\" LUA_INIT=\"X=3\" lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"10\\n\"", value: ImmutableArray.Create("10\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test LUA_INIT for files", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"x = x or 10; print(x); x = x + 1\"", value: ImmutableArray.Create("x = x or 10; print(x); x = x + 1"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT=\"@%s\" lua %s > %s'", value: ImmutableArray.Create("env LUA_INIT=\"@%s\" lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"10\\n11\\n\"", value: ImmutableArray.Create("10\n11\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test errors in LUA_INIT", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'LUA_INIT:1: msg'", value: ImmutableArray.Create("LUA_INIT:1: msg"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT=\"error(\\'msg\\')\" lua'", value: ImmutableArray.Create("env LUA_INIT=\"error('msg')\" lua"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test option '-E'", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "defaultpath");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "defaultCpath");
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(package.path, package.cpath)\"", value: ImmutableArray.Create("print(package.path, package.cpath)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_INIT=\"error(10)\" LUA_PATH=xxx LUA_CPATH=xxx lua -E %s > %s'", value: ImmutableArray.Create("env LUA_INIT=\"error(10)\" LUA_PATH=xxx LUA_CPATH=xxx lua -E %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "defaultpath");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "match");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"^(.-)\\t\"", value: ImmutableArray.Create("^(.-)\t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "defaultCpath");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "match");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\t(.-)$\"", value: ImmutableArray.Create("\t(.-)$"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- running with an empty environment", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env -i lua %s > %s'", value: ImmutableArray.Create("env -i lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "defaultpath");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "match");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"^(.-)\\t\"", value: ImmutableArray.Create("^(.-)\t"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "defaultCpath");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "match");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "output");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\\t(.-)$\"", value: ImmutableArray.Create("\t(.-)$"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- paths did not change", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "defaultpath");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"xxx\"", value: ImmutableArray.Create("xxx"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "defaultpath");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lua\"", value: ImmutableArray.Create("lua"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "defaultCpath");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"xxx\"", value: ImmutableArray.Create("xxx"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.AndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "defaultCpath");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lua\"", value: ImmutableArray.Create("lua"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test replacement of ';;' to default path", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "convert");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(package.path)\"", value: ImmutableArray.Create("print(package.path)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_PATH=\"%s\" lua %s > %s'", value: ImmutableArray.Create("env LUA_PATH=\"%s\" lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "expected");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "expected");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "sub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "expected");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MinusToken);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- cut final end of line", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\";;\"", value: ImmutableArray.Create(";;"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "gsub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\";;\"", value: ImmutableArray.Create(";;"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\";\"", value: ImmutableArray.Create(";"U8.ToArray()));
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.IdentifierToken, text: "defaultpath");
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.StringLiteralToken, text: "\";\"", value: ImmutableArray.Create(";"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "gsub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"^;\"", value: ImmutableArray.Create("^;"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- remove ';' at the beginning", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "gsub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\";$\"", value: ImmutableArray.Create(";$"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- remove ';' at the end", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "p");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "expected");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "convert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\";\"", value: ImmutableArray.Create(";"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "convert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\";;\"", value: ImmutableArray.Create(";;"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "convert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a;;b\"", value: ImmutableArray.Create("a;;b"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "convert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\";;b\"", value: ImmutableArray.Create(";;b"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "convert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a;;\"", value: ImmutableArray.Create("a;;"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "convert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a;b;;c\"", value: ImmutableArray.Create("a;b;;c"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test -l over multiple libraries", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(1); a=2; return {x=15}\"", value: ImmutableArray.Create("print(1); a=2; return {x=15}"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(a); print(_G['%s'].x)\"", value: ImmutableArray.Create("print(a); print(_G['%s'].x)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FalseKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "otherprog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_PATH=\"?;;\" lua -l %s -l%s -lstring -l io %s > %s'", value: ImmutableArray.Create("env LUA_PATH=\"?;;\" lua -l %s -l%s -lstring -l io %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "otherprog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "otherprog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"1\\n2\\n15\\n2\\n15\\n\"", value: ImmutableArray.Create("1\n2\n15\n2\n15\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test explicit global names in -l", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(str.upper'alo alo', m.max(10, 20))\"", value: ImmutableArray.Create("print(str.upper'alo alo', m.max(10, 20))"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -l 'str=string' '-lm=math' -e 'print(m.sin(0))' %s > %s\"", value: ImmutableArray.Create("lua -l 'str=string' '-lm=math' -e 'print(m.sin(0))' %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"0.0\\nALO ALO\\t20\\n\"", value: ImmutableArray.Create("0.0\nALO ALO\t20\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test module names with version sufix (\"libs/lib2-v2\")", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"env LUA_CPATH='./libs/?.so' lua -l lib2-v2 -e 'print(lib2.id())' > %s\"", value: ImmutableArray.Create("env LUA_CPATH='./libs/?.so' lua -l lib2-v2 -e 'print(lib2.id())' > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"true\\n\"", value: ImmutableArray.Create("true\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test 'arg' table", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n  assert(#arg == 3 and arg[1] == 'a' and\n         arg[2] == 'b' and arg[3] == 'c')\n  assert(arg[-1] == '--' and arg[-2] == \"-e \" and arg[-3] == '%s')\n  assert(arg[4] == undef and arg[-4] == undef)\n  local a, b, c = ...\n  assert(... == 'a' and a == 'a' and b == 'b' and c == 'c')\n]]", value: ImmutableArray.Create("  assert(#arg == 3 and arg[1] == 'a' and\n         arg[2] == 'b' and arg[3] == 'c')\n  assert(arg[-1] == '--' and arg[-2] == \"-e \" and arg[-3] == '%s')\n  assert(arg[4] == undef and arg[-4] == undef)\n  local a, b, c = ...\n  assert(... == 'a' and a == 'a' and b == 'b' and c == 'c')\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "a");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua \"-e \" -- %s a b c'", value: ImmutableArray.Create("lua \"-e \" -- %s a b c"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- \"-e \" runs an empty command", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test 'arg' availability in libraries", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.StringLiteralToken, text: "\"assert(arg)\"", value: ImmutableArray.Create("assert(arg)"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"assert(arg)\"", value: ImmutableArray.Create("assert(arg)"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FalseKeyword);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "otherprog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'env LUA_PATH=\"?;;\" lua -l%s - < %s'", value: ImmutableArray.Create("env LUA_PATH=\"?;;\" lua -l%s - < %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "otherprog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test messing up the 'arg' table", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'echo \"print(...)\" | lua -e \"arg[1] = 100\" - > %s'", value: ImmutableArray.Create("echo \"print(...)\" | lua -e \"arg[1] = 100\" - > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"100\\n\"", value: ImmutableArray.Create("100\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"'arg' is not a table\"", value: ImmutableArray.Create("'arg' is not a table"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'echo \"\" | lua -e \"arg = 1\" -'", value: ImmutableArray.Create("echo \"\" | lua -e \"arg = 1\" -"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test error in 'print'", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'echo 10 | lua -e \"print=nil\" -i > /dev/null 2> %s'", value: ImmutableArray.Create("echo 10 | lua -e \"print=nil\" -i > /dev/null 2> %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"error calling 'print'\"", value: ImmutableArray.Create("error calling 'print'"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test 'debug.debug'", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'echo \"io.stderr:write(1000)\\ncont\" | lua -e \"require\\'debug\\'.debug()\" 2> %s'", value: ImmutableArray.Create("echo \"io.stderr:write(1000)\ncont\" | lua -e \"require'debug'.debug()\" 2> %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"lua_debug> 1000lua_debug> \"", value: ImmutableArray.Create("lua_debug> 1000lua_debug> "U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"testing warnings\"", value: ImmutableArray.Create("testing warnings"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- no warnings by default", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'echo \"io.stderr:write(1); warn[[XXX]]\" | lua 2> %s'", value: ImmutableArray.Create("echo \"io.stderr:write(1); warn[[XXX]]\" | lua 2> %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"1\"", value: ImmutableArray.Create("1"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\nwarn(\"@allow\")               -- unknown control, ignored\nwarn(\"@off\", \"XXX\", \"@off\")  -- these are not control messages\nwarn(\"@off\")                 -- this one is\nwarn(\"@on\", \"YYY\", \"@on\")    -- not control, but warn is off\nwarn(\"@off\")                 -- keep it off\nwarn(\"@on\")                  -- restart warnings\nwarn(\"\", \"@on\")              -- again, no control, real warning\nwarn(\"@on\")                  -- keep it \"started\"\nwarn(\"Z\", \"Z\", \"Z\")          -- common warning\n]]", value: ImmutableArray.Create("warn(\"@allow\")               -- unknown control, ignored\nwarn(\"@off\", \"XXX\", \"@off\")  -- these are not control messages\nwarn(\"@off\")                 -- this one is\nwarn(\"@on\", \"YYY\", \"@on\")    -- not control, but warn is off\nwarn(\"@off\")                 -- keep it off\nwarn(\"@on\")                  -- restart warnings\nwarn(\"\", \"@on\")              -- again, no control, real warning\nwarn(\"@on\")                  -- keep it \"started\"\nwarn(\"Z\", \"Z\", \"Z\")          -- common warning\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua -W %s 2> %s'", value: ImmutableArray.Create("lua -W %s 2> %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\nLua warning: @offXXX@off\nLua warning: @on\nLua warning: ZZZ\n]]", value: ImmutableArray.Create("Lua warning: @offXXX@off\nLua warning: @on\nLua warning: ZZZ\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\nwarn(\"@allow\")\n-- create two objects to be finalized when closing state\n-- the errors in the finalizers must generate warnings\nu1 = setmetatable({}, {__gc = function () error(\"XYZ\") end})\nu2 = setmetatable({}, {__gc = function () error(\"ZYX\") end})\n]]", value: ImmutableArray.Create("warn(\"@allow\")\n-- create two objects to be finalized when closing state\n-- the errors in the finalizers must generate warnings\nu1 = setmetatable({}, {__gc = function () error(\"XYZ\") end})\nu2 = setmetatable({}, {__gc = function () error(\"ZYX\") end})\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua -W %s 2> %s'", value: ImmutableArray.Create("lua -W %s 2> %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkprogout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"ZYX)\\nXYZ)\\n\"", value: ImmutableArray.Create("ZYX)\nXYZ)\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- bug since 5.2: finalizer called when closing a state could", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- subvert finalization order", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n-- should be called last\nprint(\"creating 1\")\nsetmetatable({}, {__gc = function () print(1) end})\n\nprint(\"creating 2\")\nsetmetatable({}, {__gc = function ()\n  print(\"2\")\n  print(\"creating 3\")\n  -- this finalizer should not be called, as object will be\n  -- created after 'lua_close' has been called\n  setmetatable({}, {__gc = function () print(3) end})\n  print(collectgarbage())    -- cannot call collector here\n  os.exit(0, true)\nend})\n]]", value: ImmutableArray.Create("-- should be called last\nprint(\"creating 1\")\nsetmetatable({}, {__gc = function () print(1) end})\n\nprint(\"creating 2\")\nsetmetatable({}, {__gc = function ()\n  print(\"2\")\n  print(\"creating 3\")\n  -- this finalizer should not be called, as object will be\n  -- created after 'lua_close' has been called\n  setmetatable({}, {__gc = function () print(3) end})\n  print(collectgarbage())    -- cannot call collector here\n  os.exit(0, true)\nend})\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua -W %s > %s'", value: ImmutableArray.Create("lua -W %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\ncreating 1\ncreating 2\n2\ncreating 3\nnil\n1\n]]", value: ImmutableArray.Create("creating 1\ncreating 2\n2\ncreating 3\nnil\n1\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test many arguments", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[print(({...})[30])]]", value: ImmutableArray.Create("print(({...})[30])"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s %s > %s'", value: ImmutableArray.Create("lua %s %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "rep");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\" a\"", value: ImmutableArray.Create(" a"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "30", value: 30L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a\\n\"", value: ImmutableArray.Create("a\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua \"-eprint(1)\" -ea=3 -e \"print(a)\" > %s]]", value: ImmutableArray.Create("lua \"-eprint(1)\" -ea=3 -e \"print(a)\" > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"1\\n3\\n\"", value: ImmutableArray.Create("1\n3\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test iteractive mode", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n(6*2-6) -- ===\na =\n10\nprint(a)\na]]", value: ImmutableArray.Create("(6*2-6) -- ===\na =\n10\nprint(a)\na"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]", value: ImmutableArray.Create("lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkprogout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"6\\n10\\n10\\n\\n\"", value: ImmutableArray.Create("6\n10\n10\n\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"a = [[b\\nc\\nd\\ne]]\\n=a\"", value: ImmutableArray.Create("a = [[b\nc\nd\ne]]\n=a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]", value: ImmutableArray.Create("lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkprogout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"b\\nc\\nd\\ne\\n\\n\"", value: ImmutableArray.Create("b\nc\nd\ne\n\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"alo\"", value: ImmutableArray.Create("alo"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[ --\na = 2\n]]", value: ImmutableArray.Create(" --\na = 2\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua \"-e_PROMPT='%s'\" -i < %s > %s]]", value: ImmutableArray.Create("lua \"-e_PROMPT='%s'\" -i < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\".*\"", value: ImmutableArray.Create(".*"U8.ToArray()));
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\".*\"", value: ImmutableArray.Create(".*"U8.ToArray()));
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- using the prompt default", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[ --\na = 2\n]]", value: ImmutableArray.Create(" --\na = 2\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua -i < %s > %s]]", value: ImmutableArray.Create("lua -i < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"> \"", value: ImmutableArray.Create("> "U8.ToArray()));
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- the default", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\".*\"", value: ImmutableArray.Create(".*"U8.ToArray()));
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\".*\"", value: ImmutableArray.Create(".*"U8.ToArray()));
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- non-string prompt", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.StringLiteralToken, text: "\"local C = 0;\\z\n   _PROMPT=setmetatable({},{__tostring = function () \\z\n     C = C + 1; return C end})\"", value: ImmutableArray.Create("local C = 0;_PROMPT=setmetatable({},{__tostring = function () C = C + 1; return C end})"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[ --\na = 2\n]]", value: ImmutableArray.Create(" --\na = 2\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua -e \"%s\" -i < %s > %s]]", value: ImmutableArray.Create("lua -e \"%s\" -i < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prompt");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n1 --\n2a = 2\n3\n]]", value: ImmutableArray.Create("1 --\n2a = 2\n3\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "1", value: 1L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test for error objects", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\ndebug = require \"debug\"\nm = {x=0}\nsetmetatable(m, {__tostring = function(x)\n  return tostring(debug.getinfo(4).currentline + x.x)\nend})\nerror(m)\n]]", value: ImmutableArray.Create("debug = require \"debug\"\nm = {x=0}\nsetmetatable(m, {__tostring = function(x)\n  return tostring(debug.getinfo(4).currentline + x.x)\nend})\nerror(m)\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\": 6\\n\"", value: ImmutableArray.Create(": 6\n"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua %s]]", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"error{}\"", value: ImmutableArray.Create("error{}"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"error object is a table value\"", value: ImmutableArray.Create("error object is a table value"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua %s]]", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- chunk broken in many lines", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[=[ --\nfunction f ( x )\n  local a = [[\nxuxu\n]]\n  local b = \"\\\nxuxu\\n\"\n  if x == 11 then return 1 + 12 , 2 + 20 end  --[[ test multiple returns ]]\n  return x + 1\n  --\\\\\nend\nreturn( f( 100 ) )\nassert( a == b )\ndo return f( 11 ) end  ]=]", value: ImmutableArray.Create(" --\nfunction f ( x )\n  local a = [[\nxuxu\n]]\n  local b = \"\\\nxuxu\\n\"\n  if x == 11 then return 1 + 12 , 2 + 20 end  --[[ test multiple returns ]]\n  return x + 1\n  --\\\\\nend\nreturn( f( 100 ) )\nassert( a == b )\ndo return f( 11 ) end  "U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "gsub");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "' '", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "'\\n\\n'", value: ImmutableArray.Create("\n\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- change all spaces for newlines", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "s");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]", value: ImmutableArray.Create("lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkprogout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"101\\n13\\t22\\n\\n\"", value: ImmutableArray.Create("101\n13\t22\n\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[#comment in 1st line without \\n at the end]]", value: ImmutableArray.Create("#comment in 1st line without \\n at the end"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- first-line comment with binary file", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"#comment\\n\"", value: ImmutableArray.Create("#comment\n"U8.ToArray()));
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "dump");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "load");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"print(3)\"", value: ImmutableArray.Create("print(3)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.TrueKeyword);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s > %s'", value: ImmutableArray.Create("lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'3\\n'", value: ImmutableArray.Create("3\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- close Lua with an open file", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[io.output(%q); io.write('alo')]]", value: ImmutableArray.Create("io.output(%q); io.write('alo')"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'alo'", value: ImmutableArray.Create("alo"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- bug in 5.2 beta (extra \\0 after version line)", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[lua -v  -e\"print'hello'\" > %s]]", value: ImmutableArray.Create("lua -v  -e\"print'hello'\" > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "getoutput");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "t");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"PUC%-Rio\\nhello\"", value: ImmutableArray.Create("PUC%-Rio\nhello"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- testing os.exit", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"os.exit(nil, true)\"", value: ImmutableArray.Create("os.exit(nil, true)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"os.exit(0, true)\"", value: ImmutableArray.Create("os.exit(0, true)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"os.exit(true, true)\"", value: ImmutableArray.Create("os.exit(true, true)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s'", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"os.exit(1, true)\"", value: ImmutableArray.Create("os.exit(1, true)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lua %s\"", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- no message", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"os.exit(false, true)\"", value: ImmutableArray.Create("os.exit(false, true)"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lua %s\"", value: ImmutableArray.Create("lua %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- no message", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- to-be-closed variables in main chunk", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "prepfile");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n  local x <close> = setmetatable({},\n        {__close = function (self, err)\n                     assert(err == nil)\n                     print(\"Ok\")\n                   end})\n  local e1 <close> = setmetatable({}, {__close = function () print(120) end})\n  os.exit(true, true)\n]]", value: ImmutableArray.Create("  local x <close> = setmetatable({},\n        {__close = function (self, err)\n                     assert(err == nil)\n                     print(\"Ok\")\n                   end})\n  local e1 <close> = setmetatable({}, {__close = function () print(120) end})\n  os.exit(true, true)\n"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "RUN");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'lua %s > %s'", value: ImmutableArray.Create("lua %s > %s"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "checkprogout");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"120\\nOk\\n\"", value: ImmutableArray.Create("120\nOk\n"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- remove temporary files", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "prog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "otherprog");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "remove");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "out");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- invalid options", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unrecognized option '-h'\"", value: ImmutableArray.Create("unrecognized option '-h'"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -h\"", value: ImmutableArray.Create("lua -h"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unrecognized option '---'\"", value: ImmutableArray.Create("unrecognized option '---'"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lua ---\"", value: ImmutableArray.Create("lua ---"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unrecognized option '-Ex'\"", value: ImmutableArray.Create("unrecognized option '-Ex'"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -Ex\"", value: ImmutableArray.Create("lua -Ex"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unrecognized option '-vv'\"", value: ImmutableArray.Create("unrecognized option '-vv'"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -vv\"", value: ImmutableArray.Create("lua -vv"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"unrecognized option '-iv'\"", value: ImmutableArray.Create("unrecognized option '-iv'"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -iv\"", value: ImmutableArray.Create("lua -iv"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"'-e' needs argument\"", value: ImmutableArray.Create("'-e' needs argument"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -e\"", value: ImmutableArray.Create("lua -e"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"syntax error\"", value: ImmutableArray.Create("syntax error"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -e a\"", value: ImmutableArray.Create("lua -e a"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"'-l' needs argument\"", value: ImmutableArray.Create("'-l' needs argument"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"lua -l\"", value: ImmutableArray.Create("lua -l"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "T");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- test library?", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"testing 'not enough memory' to create a state\"", value: ImmutableArray.Create("testing 'not enough memory' to create a state"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "NoRun");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"not enough memory\"", value: ImmutableArray.Create("not enough memory"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"env MEMLIMIT=100 lua\"", value: ImmutableArray.Create("env MEMLIMIT=100 lua"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- testing 'warn'", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "warn");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"@store\"", value: ImmutableArray.Create("@store"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "warn");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"@123\"", value: ImmutableArray.Create("@123"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"456\"", value: ImmutableArray.Create("456"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"789\"", value: ImmutableArray.Create("789"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "_WARN");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"@123456789\"", value: ImmutableArray.Create("@123456789"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_WARN");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FalseKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "warn");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"zip\"", value: ImmutableArray.Create("zip"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\" \"", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"zap\"", value: ImmutableArray.Create("zap"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "_WARN");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"zip zap\"", value: ImmutableArray.Create("zip zap"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_WARN");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FalseKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "warn");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"ZIP\"", value: ImmutableArray.Create("ZIP"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"\"", value: ImmutableArray.Create(""U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\" \"", value: ImmutableArray.Create(" "U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"ZAP\"", value: ImmutableArray.Create("ZAP"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "_WARN");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"ZIP ZAP\"", value: ImmutableArray.Create("ZIP ZAP"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.SemicolonToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "_WARN");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FalseKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "warn");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"@normal\"", value: ImmutableArray.Create("@normal"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- 'warn' must get at least one argument", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "st");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "warn");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"string expected\"", value: ImmutableArray.Create("string expected"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- 'warn' does not leave unfinished warning in case of errors", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- (message would appear in next warning)", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "st");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pcall");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "warn");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"SHOULD NOT APPEAR\"", value: ImmutableArray.Create("SHOULD NOT APPEAR"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenBraceToken);
        V(SyntaxKind.CloseBraceToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "find");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "msg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"string expected\"", value: ImmutableArray.Create("string expected"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'+'", value: ImmutableArray.Create("+"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'testing Ctrl C'", value: ImmutableArray.Create("testing Ctrl C"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- interrupt a script", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "kill");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "execute");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'kill -INT %s 2> /dev/null'", value: ImmutableArray.Create("kill -INT %s 2> /dev/null"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- function to run a script in background, returning its output file", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- descriptor and its pid", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.FunctionKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "runback");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "luaprg");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- shell script to run 'luaprg' in background and echo its pid", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "shellprg");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "'%s -e \"%s\" & echo $!'", value: ImmutableArray.Create("%s -e \"%s\" & echo $!"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "progname");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "luaprg");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "io");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "popen");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "shellprg");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"r\"", value: ImmutableArray.Create("r"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- run shell script", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- get pid for Lua script", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"(if test fails now, it may leave a Lua script running in \\z\n            background, pid \"", value: ImmutableArray.Create("(if test fails now, it may leave a Lua script running in background, pid "U8.ToArray()));
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DotDotToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\")\"", value: ImmutableArray.Create(")"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ReturnKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- Lua script that runs protected infinite loop and then prints '42'", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "runback");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n    pcall(function () print(12); while true do end end); print(42)]]", value: ImmutableArray.Create("    pcall(function () print(12); while true do end end); print(42)"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- wait until script is inside 'pcall'", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"12\"", value: ImmutableArray.Create("12"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "kill");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- send INT signal to Lua script", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- check that 'pcall' captured the exception and script continued running", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"42\"", value: ImmutableArray.Create("42"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- expected output", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"done\"", value: ImmutableArray.Create("done"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- Lua script in a long unbreakable search", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "runback");
        V(SyntaxKind.MultiLineRawStringLiteralToken, text: "[[\n    print(15); string.find(string.rep('a', 100000), '.*b')]]", value: ImmutableArray.Create("    print(15); string.find(string.rep('a', 100000), '.*b')"U8.ToArray()));
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- wait (so script can reach the loop)", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "read");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.StringLiteralToken, text: "\"15\"", value: ImmutableArray.Create("15"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "os");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "execute");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"sleep 1\"", value: ImmutableArray.Create("sleep 1"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- must send at least two INT signals to stop this Lua script", location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.LocalKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "100", value: 100L);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.ForKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "0", value: 0L);
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "100", value: 100L);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.DoKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- keep sending signals", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IfKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NotKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "kill");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "pid");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.ThenKeyword);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- until it fails", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "i");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.SingleLineCommentTrivia, text: "-- number of non-failed kills", location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.BreakKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "f");
        V(SyntaxKind.ColonToken);
        V(SyntaxKind.IdentifierToken, text: "close");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "assert");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.GreaterThanEqualsToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.NumericLiteralToken, text: "2", value: 2L);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.IdentifierToken, text: "string");
        V(SyntaxKind.DotToken);
        V(SyntaxKind.IdentifierToken, text: "format");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"done (with %d kills)\"", value: ImmutableArray.Create("done (with %d kills)"U8.ToArray()));
        V(SyntaxKind.CommaToken);
        V(SyntaxKind.WhiteSpaceTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.IdentifierToken, text: "n");
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndKeyword);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Leading);
        V(SyntaxKind.IdentifierToken, text: "print");
        V(SyntaxKind.OpenParenToken);
        V(SyntaxKind.StringLiteralToken, text: "\"OK\"", value: ImmutableArray.Create("OK"U8.ToArray()));
        V(SyntaxKind.CloseParenToken);
        V(SyntaxKind.EndOfLineTrivia, location: TriviaLocation.Trailing);
        V(SyntaxKind.EndOfFileToken);
    }
}
