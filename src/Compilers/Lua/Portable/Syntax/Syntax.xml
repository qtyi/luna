<?xml version="1.0" encoding="utf-8"?>
<Tree Root="SyntaxNode">

  <PredefinedNode Name="LuaSyntaxNode" Base="SyntaxNode"/>
  <PredefinedNode Name="SyntaxToken" Base="LuaSyntaxNode"/>
  <PredefinedNode Name="StructuredTriviaSyntax" Base="LuaSyntaxNode"/>



  <!-- Names -->
  <AbstractNode Name="NameSyntax" Base="TypeSyntax"/>
  <AbstractNode Name="SimpleNameSyntax" Base="NameSyntax">
    <Field Name="Identifier" Type="SyntaxToken"/>
  </AbstractNode>
  <Node Name="IdentifierNameSyntax" Base="SimpleNameSyntax">
    <Kind Name="IdentifierName"/>
    <Field Name="Identifier" Type="SyntaxToken" Override="true">
      <Kind Name="IdentifierToken"/>
      <Kind Name="EnvironmentKeyword"/>
    </Field>
  </Node>
  <Node Name="GenericNameSyntax" Base="SimpleNameSyntax">
    <Kind Name="GenericName"/>
    <Field Name="Identifier" Type="SyntaxToken" Override="true">
      <Kind Name="IdentifierToken"/>
    </Field>
    <Field Name="TypeArgumentList" Type="TypeArgumentListSyntax"/>
  </Node>
  <Node Name="TypeArgumentListSyntax" Base="LuaSyntaxNode">
    <Kind Name="TypeArgumentList"/>
    <Field Name="LessThanToken" Type="SyntaxToken">
      <Kind Name="LessThanToken" />
    </Field>
    <Field Name="TypeArguments" Type="SeparatedSyntaxList&lt;TypeSyntax&gt;"/>
    <Field Name="GreaterThanToken" Type="SyntaxToken">
      <Kind Name="GreaterThanToken"/>
    </Field>
  </Node>
  <Node Name="QualifiedNameSyntax" Base="NameSyntax">
    <Kind Name="QualifiedName" />
    <Field Name="Left" Type="NameSyntax"/>
    <Field Name="DotToken" Type="SyntaxToken">
      <Kind Name="DotToken"/>
    </Field>
    <Field Name="Right" Type="IdentifierNameSyntax"/>
  </Node>
  <Node Name="ImplicitSelfParameterNameSyntax" Base="NameSyntax">
    <Kind Name="ImplicitSelfParameterName" />
    <Field Name="Left" Type="NameSyntax"/>
    <Field Name="ColonToken" Type="SyntaxToken">
      <Kind Name="ColonToken"/>
    </Field>
    <Field Name="Right" Type="IdentifierNameSyntax"/>
  </Node>
  
  
  
  <!-- Types -->
  <AbstractNode Name="TypeSyntax" Base="ExpressionSyntax"/>



  <!-- Expressions -->
  <AbstractNode Name="ExpressionSyntax" Base="LuaSyntaxNode"/>
  <Node Name="LiteralExpressionSyntax" Base="ExpressionSyntax">
    <Kind Name="NilLiteralExpression"/>
    <Kind Name="FalseLiteralExpression"/>
    <Kind Name="TrueLiteralExpression"/>
    <Kind Name="NumericLiteralExpression"/>
    <Kind Name="StringLiteralExpression"/>
    <Kind Name="VariousArgumentsExpression"/>
    <Field Name="Token" Type="SyntaxToken">
      <Kind Name="NilKeyword"/>
      <Kind Name="FalseKeyword"/>
      <Kind Name="TrueKeyword"/>
      <Kind Name="NumericLiteralToken"/>
      <Kind Name="StringLiteralToken"/>
      <Kind Name="MultiLineRawStringLiteralToken"/>
      <Kind Name="DotDotDotToken"/>
    </Field>
  </Node>
  <Node Name="ParenthesizedExpressionSyntax" Base="ExpressionSyntax">
    <Kind Name="ParenthesizedExpression"/>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Expression" Type="ExpressionSyntax"/>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <Kind Name="CloseParenToken"/>
    </Field>
  </Node>
  <Node Name="FunctionDefinitionExpressionSyntax" Base="ExpressionSyntax">
    <Kind Name="FunctionDefinitionExpression"/>
    <Field Name="FunctionKeyword" Type="SyntaxToken">
      <Kind Name="FunctionKeyword"/>
    </Field>
    <Field Name="ParameterList" Type="ParameterDeclarationListSyntax"/>
    <Field Name="Block" Type="BlockSyntax"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="TableConstructorExpressionSyntax" Base="ExpressionSyntax">
    <Kind Name="TableConstructorExpression"/>
    <Field Name="OpenBrace" Type="SyntaxToken">
      <Kind Name="OpenBraceToken"/>
    </Field>
    <Field Name="Fields" Type="SeparatedSyntaxList&lt;FieldSyntax&gt;" AllowTrailingSeparator="true"/>
    <Field Name="CloseBrace" Type="SyntaxToken">
      <Kind Name="CloseBraceToken"/>
    </Field>
  </Node>
  <Node Name="BinaryExpressionSyntax" Base="ExpressionSyntax">
    <Kind Name="AdditionExpression"/>
    <Kind Name="SubtractionExpression"/>
    <Kind Name="MultiplicationExpression"/>
    <Kind Name="DivisionExpression"/>
    <Kind Name="FloorDivisionExpression"/>
    <Kind Name="ExponentiationExpression"/>
    <Kind Name="ModuloExpression"/>
    <Kind Name="BitwiseAndExpression"/>
    <Kind Name="BitwiseExclusiveOrExpression"/>
    <Kind Name="BitwiseOrExpression"/>
    <Kind Name="BitwiseLeftShiftExpression"/>
    <Kind Name="BitwiseRightShiftExpression"/>
    <Kind Name="ConcatenationExpression"/>
    <Kind Name="LessThanExpression"/>
    <Kind Name="LessThanOrEqualExpression"/>
    <Kind Name="GreaterThanExpression"/>
    <Kind Name="GreaterThanOrEqualExpression"/>
    <Kind Name="EqualExpression"/>
    <Kind Name="NotEqualExpression"/>
    <Kind Name="AndExpression"/>
    <Kind Name="OrExpression"/>
    <Field Name="Left" Type="ExpressionSyntax"/>
    <Field Name="OperatorToken" Type="SyntaxToken">
      <Kind Name="PlusToken"/>
      <Kind Name="MinusToken"/>
      <Kind Name="AsteriskToken"/>
      <Kind Name="SlashToken"/>
      <Kind Name="SlashSlashToken"/>
      <Kind Name="CaretToken"/>
      <Kind Name="PercentToken"/>
      <Kind Name="AmpersandToken"/>
      <Kind Name="TildeToken"/>
      <Kind Name="BarToken"/>
      <Kind Name="LessThanLessThanToken"/>
      <Kind Name="GreaterThanGreaterThanToken"/>
      <Kind Name="DotDotToken"/>
      <Kind Name="LessThanToken"/>
      <Kind Name="LessThanEqualsToken"/>
      <Kind Name="GreaterThanToken"/>
      <Kind Name="GreaterThanEqualsToken"/>
      <Kind Name="EqualsToken"/>
      <Kind Name="EqualsEqualsToken"/>
      <Kind Name="TildeEqualsToken"/>
      <Kind Name="AndKeyword"/>
      <Kind Name="OrKeyword"/>
    </Field>
    <Field Name="Right" Type="ExpressionSyntax"/>
  </Node>
  <Node Name="UnaryExpressionSyntax" Base="ExpressionSyntax">
    <Kind Name="UnaryMinusExpression"/>
    <Kind Name="LogicalNotExpression"/>
    <Kind Name="LengthExpression"/>
    <Kind Name="BitwiseNotExpression"/>
    <Field Name="OperatorToken" Type="SyntaxToken">
      <Kind Name="MinusToken"/>
      <Kind Name="NotKeyword"/>
      <Kind Name="HashToken"/>
      <Kind Name="TildeToken"/>
    </Field>
    <Field Name="Operand" Type="ExpressionSyntax"/>
  </Node>
  <AbstractNode Name="MemberAccessExpressionSyntax" Base="ExpressionSyntax">
    <Field Name="Self" Type="ExpressionSyntax"/>
    <Field Name="Member" Type="ExpressionSyntax"/>
  </AbstractNode>
  <Node Name="SimpleMemberAccessExpressionSyntax" Base="MemberAccessExpressionSyntax">
    <Kind Name="SimpleMemberAccessExpression"/>
    <Field Name="Self" Type="ExpressionSyntax" Override="true"/>
    <Field Name="OperatorToken" Type="SyntaxToken">
      <Kind Name="DotToken"/>
    </Field>
    <Field Name="MemberName" Type="IdentifierNameSyntax"/>
  </Node>
  <Node Name="IndexMemberAccessExpressionSyntax" Base="MemberAccessExpressionSyntax">
    <Kind Name="IndexMemberAccessExpression"/>
    <Field Name="Self" Type="ExpressionSyntax" Override="true"/>
    <Field Name="OpenBracketToken" Type="SyntaxToken">
      <Kind Name="OpenBracketToken"/>
    </Field>
    <Field Name="Member" Type="ExpressionSyntax" Override="true"/>
    <Field Name="CloseBracketToken" Type="SyntaxToken">
      <Kind Name="CloseBracketToken"/>
    </Field>
  </Node>
  <Node Name="InvocationExpressionSyntax" Base="ExpressionSyntax">
    <Kind Name="InvocationExpression"/>
    <Field Name="Expression" Type="ExpressionSyntax"/>
    <Field Name="Arguments" Type="InvocationArgumentsSyntax"/>
  </Node>
  <Node Name="ImplicitSelfParameterExpressionSyntax" Base="ExpressionSyntax">
    <Kind Name="ImplicitSelfParameterExpression"/>
    <Field Name="Expression" Type="ExpressionSyntax"/>
    <Field Name="ColonToken" Type="SyntaxToken">
      <Kind Name="ColonToken"/>
    </Field>
    <Field Name="Name" Type="IdentifierNameSyntax"/>
  </Node>
  <Node Name="ObjectCreationExpressionSyntax" Base="ExpressionSyntax">
    <Kind Name="ObjectCreationExpression"/>
    <Field Name="NewKeyword" Type="SyntaxToken" Optional="True">
      <Kind Name="NewKeyword"/>
    </Field>
    <Field Name="Name" Type="NameSyntax"/>
    <Field Name="Arguments" Type="InvocationArgumentsSyntax"/>
  </Node>



  <!-- Statements -->
  <AbstractNode Name="StatementSyntax" Base="LuaSyntaxNode"/>
  <Node Name="EmptyStatementSyntax" Base="StatementSyntax">
    <Kind Name="EmptyStatement"/>
    <Field Name="SemicolonToken" Type="SyntaxToken">
      <Kind Name="SemicolonToken"/>
    </Field>
  </Node>
  <Node Name="AssignmentStatementSyntax" Base="StatementSyntax">
    <Kind Name="AssignmentStatement"/>
    <Field Name="Left" Type="SeparatedSyntaxList&lt;ExpressionSyntax&gt;" MinCount="1"/>
    <Field Name="EqualsToken" Type="SyntaxToken">
      <Kind Name="EqualsToken"/>
    </Field>
    <Field Name="Right" Type="SeparatedSyntaxList&lt;ExpressionSyntax&gt;" MinCount="1"/>
  </Node>
  <Node Name="InvocationStatementSyntax" Base="StatementSyntax">
    <Kind Name="InvocationStatement"/>
    <Field Name="Expression" Type="InvocationExpressionSyntax"/>
  </Node>
  <Node Name="LabelStatementSyntax" Base="StatementSyntax">
    <Kind Name="LabelStatement"/>
    <Field Name="LeftColonColonToken" Type="SyntaxToken">
      <Kind Name="ColonColonToken"/>
    </Field>
    <Field Name="Name" Type="IdentifierNameSyntax"/>
    <Field Name="RightColonColonToken" Type="SyntaxToken">
      <Kind Name="ColonColonToken"/>
    </Field>
  </Node>
  <Node Name="BreakStatementSyntax" Base="StatementSyntax">
    <Kind Name="BreakStatement"/>
    <Field Name="BreakKeyword" Type="SyntaxToken">
      <Kind Name="BreakKeyword"/>
    </Field>
  </Node>
  <Node Name="GotoStatementSyntax" Base="StatementSyntax">
    <Kind Name="GotoStatement"/>
    <Field Name="GotoKeyword" Type="SyntaxToken">
      <Kind Name="GotoKeyword"/>
    </Field>
    <Field Name="Name" Type="IdentifierNameSyntax"/>
  </Node>
  <Node Name="ReturnStatementSyntax" Base="StatementSyntax">
    <Kind Name="ReturnStatement"/>
    <Field Name="ReturnKeyword" Type="SyntaxToken">
      <Kind Name="ReturnKeyword"/>
    </Field>
    <Field Name="Expressions" Type="SeparatedSyntaxList&lt;ExpressionSyntax&gt;"/>
  </Node>
  <Node Name="DoStatementSyntax" Base="StatementSyntax">
    <Kind Name="DoStatement"/>
    <Field Name="DoKeyword" Type="SyntaxToken">
      <Kind Name="DoKeyword"/>
    </Field>
    <Field Name="Block" Type="BlockSyntax"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="WhileStatementSyntax" Base="StatementSyntax">
    <Kind Name="WhileStatement"/>
    <Field Name="WhileKeyword" Type="SyntaxToken">
      <Kind Name="WhileKeyword"/>
    </Field>
    <Field Name="Condition" Type="ExpressionSyntax"/>
    <Field Name="DoKeyword" Type="SyntaxToken">
      <Kind Name="DoKeyword"/>
    </Field>
    <Field Name="Block" Type="BlockSyntax"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="RepeatStatementSyntax" Base="StatementSyntax">
    <Kind Name="RepeatStatement"/>
    <Field Name="RepeatKeyword" Type="SyntaxToken">
      <Kind Name="RepeatKeyword"/>
    </Field>
    <Field Name="Block" Type="BlockSyntax"/>
    <Field Name="UntilKeyword" Type="SyntaxToken">
      <Kind Name="UntilKeyword"/>
    </Field>
    <Field Name="Condition" Type="ExpressionSyntax"/>
  </Node>
  <Node Name="IfStatementSyntax" Base="StatementSyntax">
    <Kind Name="IfStatement"/>
    <Field Name="IfKeyword" Type="SyntaxToken">
      <Kind Name="IfKeyword"/>
    </Field>
    <Field Name="Condition" Type="ExpressionSyntax"/>
    <Field Name="ThenKeyword" Type="SyntaxToken">
      <Kind Name="ThenKeyword"/>
    </Field>
    <Field Name="Block" Type="BlockSyntax"/>
    <Field Name="ElseIfs" Type="SyntaxList&lt;ElseIfClauseSyntax&gt;"/>
    <Field Name="Else" Type="ElseClauseSyntax" Optional="true"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="ElseIfClauseSyntax" Base="LuaSyntaxNode">
    <Kind Name="ElseIfClause"/>
    <Field Name="ElseIfKeyword" Type="SyntaxToken">
      <Kind Name="ElseIfKeyword"/>
    </Field>
    <Field Name="Condition" Type="ExpressionSyntax"/>
    <Field Name="ThenKeyword" Type="SyntaxToken">
      <Kind Name="ThenKeyword"/>
    </Field>
    <Field Name="Block" Type="BlockSyntax"/>
  </Node>
  <Node Name="ElseClauseSyntax" Base="LuaSyntaxNode">
    <Kind Name="ElseClause"/>
    <Field Name="ElseKeyword" Type="SyntaxToken">
      <Kind Name="ElseKeyword"/>
    </Field>
    <Field Name="Block" Type="BlockSyntax"/>
  </Node>
  <Node Name="ForStatementSyntax" Base="StatementSyntax">
    <Kind Name="ForStatement"/>
    <Field Name="ForKeyword" Type="SyntaxToken">
      <Kind Name="ForKeyword"/>
    </Field>
    <Field Name="Name" Type="IdentifierNameSyntax"/>
    <Field Name="EqualsToken" Type="SyntaxToken">
      <Kind Name="EqualsToken"/>
    </Field>
    <Field Name="Initial" Type="ExpressionSyntax"/>
    <Field Name="FirstCommaToken" Type="SyntaxToken">
      <Kind Name="CommaToken"/>
    </Field>
    <Field Name="Limit" Type="ExpressionSyntax"/>
    <Field Name="SecondCommaToken" Type="SyntaxToken" Optional="true">
      <Kind Name="CommaToken"/>
    </Field>
    <Field Name="Step" Type="ExpressionSyntax" Optional="true"/>
    <Field Name="DoKeyword" Type="SyntaxToken">
      <Kind Name="DoKeyword"/>
    </Field>
    <Field Name="Block" Type="BlockSyntax"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="ForInStatementSyntax" Base="StatementSyntax">
    <Kind Name="ForInStatement"/>
    <Field Name="ForKeyword" Type="SyntaxToken">
      <Kind Name="ForKeyword"/>
    </Field>
    <Field Name="Names" Type="SeparatedSyntaxList&lt;IdentifierNameSyntax&gt;" MinCount="1"/>
    <Field Name="InKeyword" Type="SyntaxToken">
      <Kind Name="InKeyword"/>
    </Field>
    <Field Name="Expressions" Type="SeparatedSyntaxList&lt;ExpressionSyntax&gt;" MinCount="1"/>
    <Field Name="DoKeyword" Type="SyntaxToken">
      <Kind Name="DoKeyword"/>
    </Field>
    <Field Name="Block" Type="BlockSyntax"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="FunctionDefinitionStatementSyntax" Base="StatementSyntax">
    <Kind Name="FunctionDefinitionStatement"/>
    <Field Name="FunctionKeyword" Type="SyntaxToken">
      <Kind Name="FunctionKeyword"/>
    </Field>
    <Field Name="Name" Type="NameSyntax"/>
    <Field Name="ParameterList" Type="ParameterDeclarationListSyntax"/>
    <Field Name="Block" Type="BlockSyntax"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="LocalFunctionDefinitionStatementSyntax" Base="StatementSyntax">
    <Kind Name="LocalFunctionDefinitionStatement"/>
    <Field Name="LocalKeyword" Type="SyntaxToken">
      <Kind Name="LocalKeyword"/>
    </Field>
    <Field Name="FunctionKeyword" Type="SyntaxToken">
      <Kind Name="FunctionKeyword"/>
    </Field>
    <Field Name="Name" Type="IdentifierNameSyntax"/>
    <Field Name="ParameterList" Type="ParameterDeclarationListSyntax"/>
    <Field Name="Block" Type="BlockSyntax"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="LocalDeclarationStatementSyntax" Base="StatementSyntax">
    <Kind Name="LocalDeclarationStatement"/>
    <Field Name="LocalKeyword" Type="SyntaxToken">
      <Kind Name="LocalKeyword"/>
    </Field>
    <Field Name="NameAttributeLists" Type="SeparatedSyntaxList&lt;NameAttributeListSyntax&gt;" MinCount="1"/>
    <Field Name="Initializer" Type="EqualsValuesClauseSyntax" Optional="true"/>
  </Node>
  <Node Name="EqualsValuesClauseSyntax" Base="LuaSyntaxNode">
    <Kind Name="EqualsValuesClause"/>
    <Field Name="EqualsToken" Type="SyntaxToken">
      <Kind Name="EqualsToken"/>
    </Field>
    <Field Name="Expressions" Type="SeparatedSyntaxList&lt;ExpressionSyntax&gt;" MinCount="1"/>
  </Node>
  <Node Name="DeclarationStatementSyntax" Base="StatementSyntax">
    <Kind Name="DeclarationStatement"/>
    <Field Name="Declaration" Type="DeclarationSyntax"/>
  </Node>



  <!-- Trivia -->
  <!-- Preprocessor -->
  <AbstractNode Name="DirectiveTriviaSyntax" Base="StructuredTriviaSyntax">
    <Field Name="IsActive" Type="bool"/>
    <Field Name="PromptToken" Type="SyntaxToken"/>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken"/>
  </AbstractNode>
  <Node Name="BadDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <Kind Name="BadDirectiveTrivia"/>
    <Field Name="PromptToken" Type="SyntaxToken" Override="true"/>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true"/>
  </Node>
  <Node Name="ShebangDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <Kind Name="ShebangDirectiveTrivia"/>
    <Field Name="PromptToken" Type="SyntaxToken" Override="true">
      <Kind Name="HashExclamationToken"/>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true"/>
  </Node>
  <Node Name="DebugDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <Kind Name="DebugDirectiveTrivia"/>
    <Field Name="PromptToken" Type="SyntaxToken" Override="true">
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="DebugKeyword" Type="SyntaxToken">
      <Kind Name="DebugKeyword"/>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true"/>
  </Node>
  <Node Name="NoDebugDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <Kind Name="NoDebugDirectiveTrivia"/>
    <Field Name="PromptToken" Type="SyntaxToken" Override="true">
      <Kind Name="HashToken"/>
    </Field>
    <Field Name="NoDebugKeyword" Type="SyntaxToken">
      <Kind Name="NoDebugKeyword"/>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true"/>
  </Node>
  <AbstractNode Name="BranchingDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <Field Name="BranchTaken" Type="bool"/>
  </AbstractNode>
  <AbstractNode Name="ConditionalDirectiveTriviaSyntax" Base="BranchingDirectiveTriviaSyntax">
    <Field Name="Condition" Type="ExpressionSyntax"/>
    <Field Name="ConditionValue" Type="bool"/>
  </AbstractNode>
  <Node Name="IfDirectiveTriviaSyntax" Base="ConditionalDirectiveTriviaSyntax">
    <Kind Name="IfDirectiveTrivia"/>
    <Field Name="PromptToken" Type="SyntaxToken" Override="true">
      <Kind Name="DollarToken"/>
    </Field>
    <Field Name="IfKeyword" Type="SyntaxToken">
      <Kind Name="IfKeyword"/>
    </Field>
    <Field Name="Condition" Type="ExpressionSyntax" Override="true"/>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true"/>
    <Field Name="BranchTaken" Type="bool" Override="true"/>
    <Field Name="ConditionValue" Type="bool" Override="true"/>
  </Node>
  <Node Name="IfNotDirectiveTriviaSyntax" Base="ConditionalDirectiveTriviaSyntax">
    <Kind Name="IfNotDirectiveTrivia"/>
    <Field Name="PromptToken" Type="SyntaxToken" Override="true">
      <Kind Name="DollarToken"/>
    </Field>
    <Field Name="IfNotKeyword" Type="SyntaxToken">
      <Kind Name="IfNotKeyword"/>
    </Field>
    <Field Name="Condition" Type="ExpressionSyntax" Override="true"/>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true"/>
    <Field Name="BranchTaken" Type="bool" Override="true"/>
    <Field Name="ConditionValue" Type="bool" Override="true"/>
  </Node>
  <Node Name="ElseDirectiveTriviaSyntax" Base="BranchingDirectiveTriviaSyntax">
    <Kind Name="ElseDirectiveTrivia"/>
    <Field Name="PromptToken" Type="SyntaxToken" Override="true">
      <Kind Name="DollarToken"/>
    </Field>
    <Field Name="ElseKeyword" Type="SyntaxToken">
      <Kind Name="ElseKeyword"/>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true"/>
    <Field Name="BranchTaken" Type="bool" Override="true"/>
  </Node>
  <Node Name="EndDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <Kind Name="EndDirectiveTrivia"/>
    <Field Name="PromptToken" Type="SyntaxToken" Override="true">
      <Kind Name="DollarToken"/>
    </Field>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true"/>
  </Node>
  <Node Name="EndInputDirectiveTriviaSyntax" Base="DirectiveTriviaSyntax">
    <Kind Name="EndInputDirectiveTrivia"/>
    <Field Name="PromptToken" Type="SyntaxToken" Override="true">
      <Kind Name="DollarToken"/>
    </Field>
    <Field Name="EndInputKeyword" Type="SyntaxToken">
      <Kind Name="EndInputKeyword"/>
    </Field>
    <Field Name="EndOfDirectiveToken" Type="SyntaxToken" Override="true">
      <Kind Name="EndOfDirectiveToken"/>
    </Field>
    <Field Name="IsActive" Type="bool" Override="true"/>
  </Node>
  <Node Name="SkippedTokensTriviaSyntax" Base="StructuredTriviaSyntax">
    <Kind Name="SkippedTokensTrivia"/>
    <Field Name="Tokens" Type="SyntaxList&lt;SyntaxToken&gt;"/>
  </Node>



  <!-- Declarations -->
  <Node Name="ChunkSyntax" Base="LuaSyntaxNode">
    <Kind Name="Chunk"/>
    <Field Name="Block" Type="BlockSyntax"/>
    <Field Name="EndOfFileToken" Type="SyntaxToken">
      <Kind Name="EndOfFileToken"/>
    </Field>
  </Node>
  <Node Name="BlockSyntax" Base="LuaSyntaxNode">
    <Kind Name="Block"/>
    <Field Name="Statements" Type="SyntaxList&lt;StatementSyntax&gt;"/>
    <Field Name="Return" Type="ReturnStatementSyntax" Optional="true"/>
  </Node>
  <AbstractNode Name="DeclarationSyntax" Base="LuaSyntaxNode">
    <TypeComment>
      <summary>Declaration syntax.</summary>
    </TypeComment>
    <Field Name="Modifiers" Type="ModifierListSyntax" Optional="true">
      <PropertyComment>
        <summary>Gets the modifier list.</summary>
      </PropertyComment>
    </Field>
    <Field Name="AnnotatedWithClause" Type="AnnotatedWithClauseSyntax" Optional="true">
      <PropertyComment>
        <summary>Gets the annotatedwith clause.</summary>
      </PropertyComment>
    </Field>
  </AbstractNode>
  <Node Name="ModifierListSyntax" Base="LuaSyntaxNode">
    <Kind Name="ModifierList"/>
    <Field Name="LessThanToken" Type="SyntaxToken">
      <Kind Name="LessThanToken"/>
    </Field>
    <Field Name="Modifiers" Type="SeparatedSyntaxList&lt;ModifierSyntax&gt;"/>
    <Field Name="GreaterThanToken" Type="SyntaxToken">
      <Kind Name="GreaterThanToken"/>
    </Field>
  </Node>
  <Node Name="ModifierSyntax" Base="LuaSyntaxNode">
    <Kind Name="Modifier"/>
    <Field Name="Identifiers" Type="SyntaxList&lt;SyntaxToken&gt;"/>
  </Node>
  <Node Name="AnnotatedWithClauseSyntax" Base="LuaSyntaxNode">
    <Kind Name="AnnotatedWithClause"/>
    <Field Name="AnnotatedWithKeyword" Type="SyntaxToken">
      <Kind Name="AnnotatedWithKeyword"/>
    </Field>
    <Field Name="AttributeList" Type="SeparatedSyntaxList&lt;ObjectCreationExpressionSyntax&gt;"/>
  </Node>
  <AbstractNode Name="TopLevelDeclarationSyntax" Base="DeclarationSyntax">
    
  </AbstractNode>
  <Node Name="AssemblyDeclarationSyntax" Base="TopLevelDeclarationSyntax">
    <Kind Name="AssemblyDeclaration"/>
    <Field Name="AssemblyKeyword" Type="SyntaxToken"  >
      <Kind Name="AssemblyKeyword"/>
    </Field>
    <Field Name="AnnotatedWithClause" Type="AnnotatedWithClauseSyntax" Optional="true" Override="true"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="ModuleDeclarationSyntax" Base="TopLevelDeclarationSyntax">
    <Kind Name="ModuleDeclaration"/>
    <Field Name="ModuleKeyword" Type="SyntaxToken">
      <Kind Name="ModuleKeyword"/>
    </Field>
    <Field Name="AnnotatedWithClause" Type="AnnotatedWithClauseSyntax" Optional="true" Override="true"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="NamespaceDeclarationSyntax" Base="TopLevelDeclarationSyntax">
    <Kind Name="NamespaceDeclaration"/>
    <Field Name="NamespaceKeyword" Type="SyntaxToken">
      <Kind Name="NamespaceKeyword"/>
    </Field>
    <Field Name="Name" Type="NameSyntax"/>
    <Field Name="Block" Type="BlockSyntax"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <AbstractNode Name="TypeDeclarationSyntax" Base="DeclarationSyntax">
    <Field Name="Identifier" Type="SyntaxToken">
      <Kind Name="IdentifierToken"/>
    </Field>
    <Field Name="TypeParameterList" Type="TypeParameterDeclarationListSyntax" Optional="true"/>
    <Field Name="ExtendsClause" Type="ExtendsClauseSyntax" Optional="true"/>
    <Field Name="ImplementsClause" Type="ImplementsClauseSyntax" Optional="true"/>
    <Field Name="Block" Type="BlockSyntax"/>
  </AbstractNode>
  <Node Name="TypeParameterDeclarationListSyntax" Base="LuaSyntaxNode">
    <Kind Name="TypeParameterDeclarationList"/>
    <Field Name="OpenBracketToken" Type="SyntaxToken">
      <Kind Name="OpenBracketToken"/>
    </Field>
    <Field Name="TypeParameters" Type="SeparatedSyntaxList&lt;TypeParameterDeclarationSyntax&gt;"/>
    <Field Name="CloseBracketToken" Type="SyntaxToken">
      <Kind Name="CloseBracketToken"/>
    </Field>
  </Node>
  <Node Name="TypeParameterDeclarationSyntax" Base="DeclarationSyntax">
    <Kind Name="TypeParameterDeclaration"/>
    <Field Name="TypeParameterKeyword" Type="SyntaxToken">
      <Kind Name="TypeParameterKeyword"/>
    </Field>
    <Field Name="Modifiers" Type="ModifierListSyntax" Optional="true" Override="true"/>
    <Field Name="Identifier" Type="SyntaxToken">
      <Kind Name="IdentifierToken"/>
    </Field>
    <Field Name="ConstrainAsClause" Type="ConstrainAsClauseSyntax" Optional="true"/>
    <Field Name="AnnotatedWithClause" Type="AnnotatedWithClauseSyntax" Optional="true" Override="true"/>
    <Field Name="EndKeyword" Type="SyntaxToken" Optional="true">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="ConstrainAsClauseSyntax" Base="LuaSyntaxNode">
    <Kind Name="ConstrainAsClause"/>
    <Field Name="ConstrainAsKeyword" Type="SyntaxToken">
      <Kind Name="ConstrainAsKeyword"/>
    </Field>
    <Field Name="Constraints" Type="SeparatedSyntaxList&lt;ConstraintSyntax&gt;"/>
  </Node>
  <AbstractNode Name="ConstraintSyntax" Base="LuaSyntaxNode"/>
  <Node Name="BaseTypeConstraintSyntax" Base="ConstraintSyntax">
    <Kind Name="BaseTypeConstraint"/>
    <Field Name="Type" Type="NameSyntax"/>
  </Node>
  <Node Name="ConstructorConstraintSyntax" Base="ConstraintSyntax">
    <Kind Name="ConstructorConstraint"/>
    <Field Name="NewKeyword" Type="SyntaxToken">
      <Kind Name="NewKeyword"/>
    </Field>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <Kind Name="CloseParenToken"/>
    </Field>
  </Node>
  <Node Name="ExtendsClauseSyntax" Base="LuaSyntaxNode">
    <Kind Name="ExtendsClause"/>
    <Field Name="ExtendsKeyword" Type="SyntaxToken">
      <Kind Name="ExtendsKeyword"/>
    </Field>
    <Field Name="Type" Type="NameSyntax"/>
  </Node>
  <Node Name="ImplementsClauseSyntax" Base="LuaSyntaxNode">
    <Kind Name="ImplementsClause"/>
    <Field Name="ImplementsKeyword" Type="SyntaxToken">
      <Kind Name="ImplementsKeyword"/>
    </Field>
    <Field Name="Types" Type="SeparatedSyntaxList&lt;NameSyntax&gt;"/>
  </Node>
  <Node Name="InterfaceDeclarationSyntax" Base="TypeDeclarationSyntax">
    <Kind Name="InterfaceDeclaration"/>
    <Field Name="InterfaceKeyword" Type="SyntaxToken" Optional="true">
      <Kind Name="InterfaceKeyword"/>
    </Field>
    <Field Name="Modifiers" Type="ModifierListSyntax" Optional="true" Override="true"/>
    <Field Name="Identifier" Type="SyntaxToken" Override="true">
      <Kind Name="IdentifierToken"/>
    </Field>
    <Field Name="TypeParameterList" Type="TypeParameterDeclarationListSyntax" Optional="true" Override="true"/>
    <Field Name="ImplementsClause" Type="ImplementsClauseSyntax" Optional="true" Override="true"/>
    <Field Name="AnnotatedWithClause" Type="AnnotatedWithClauseSyntax" Optional="true" Override="true"/>
    <Field Name="Block" Type="BlockSyntax" Override="true"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="ClassDeclarationSyntax" Base="TypeDeclarationSyntax">
    <Kind Name="ClassDeclaration"/>
    <Field Name="ClassKeyword" Type="SyntaxToken" Optional="true">
      <Kind Name="ClassKeyword"/>
    </Field>
    <Field Name="Modifiers" Type="ModifierListSyntax" Optional="true" Override="true"/>
    <Field Name="Identifier" Type="SyntaxToken" Override="true">
      <Kind Name="IdentifierToken"/>
    </Field>
    <Field Name="TypeParameterList" Type="TypeParameterDeclarationListSyntax" Optional="true" Override="true"/>
    <Field Name="ExtendsClause" Type="ExtendsClauseSyntax" Optional="true" Override="true"/>
    <Field Name="ImplementsClause" Type="ImplementsClauseSyntax" Optional="true" Override="true"/>
    <Field Name="AnnotatedWithClause" Type="AnnotatedWithClauseSyntax" Optional="true" Override="true"/>
    <Field Name="Block" Type="BlockSyntax" Override="true"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="FieldDeclarationSyntax" Base="DeclarationSyntax">
    <Kind Name="FieldDeclaration"/>
    <Field Name="FieldKeyword" Type="SyntaxToken">
      <Kind Name="FieldKeyword"/>
    </Field>
    <Field Name="Modifiers" Type="ModifierListSyntax" Optional="true" Override="true"/>
    <Field Name="Identifier" Type="SyntaxToken">
      <Kind Name="IdentifierToken"/>
    </Field>
    <Field Name="ColonToken" Type="SyntaxToken" Optional="true">
      <Kind Name="ColonToken" />
    </Field>
    <Field Name="Type" Type="TypeSyntax" Optional="true"/>
    <Field Name="AnnotatedWithClause" Type="AnnotatedWithClauseSyntax" Optional="true" Override="true"/>
    <Field Name="Initializer" Type="EqualsValuesClauseSyntax"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="EventDeclarationSyntax" Base="DeclarationSyntax">
    <Kind Name="EventDeclaration"/>
    <Field Name="EventKeyword" Type="SyntaxToken">
      <Kind Name="EventKeyword"/>
    </Field>
    <Field Name="Modifiers" Type="ModifierListSyntax" Optional="true" Override="true"/>
    <Field Name="Identifier" Type="SyntaxToken">
      <Kind Name="IdentifierToken"/>
    </Field>
    <Field Name="ColonToken" Type="SyntaxToken" Optional="true">
      <Kind Name="ColonToken" />
    </Field>
    <Field Name="Type" Type="TypeSyntax" Optional="true"/>
    <Field Name="ImplementsClause" Type="ImplementsClauseSyntax" Optional="true"/>
    <Field Name="AnnotatedWithClause" Type="AnnotatedWithClauseSyntax" Optional="true" Override="true"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="PropertyDeclarationSyntax" Base="DeclarationSyntax">
    <Kind Name="PropertyDeclaration"/>
    <Field Name="PropertyKeyword" Type="SyntaxToken">
      <Kind Name="PropertyKeyword"/>
    </Field>
    <Field Name="Modifiers" Type="ModifierListSyntax" Optional="true" Override="true"/>
    <Field Name="Identifier" Type="SyntaxToken">
      <Kind Name="IdentifierToken"/>
    </Field>
    <Field Name="ColonToken" Type="SyntaxToken" Optional="true">
      <Kind Name="ColonToken" />
    </Field>
    <Field Name="Type" Type="TypeSyntax" Optional="true"/>
    <Field Name="ImplementsClause" Type="ImplementsClauseSyntax" Optional="true"/>
    <Field Name="AnnotatedWithClause" Type="AnnotatedWithClauseSyntax" Optional="true" Override="true"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="MethodDeclarationSyntax" Base="DeclarationSyntax">
    <Kind Name="MethodDeclaration"/>
    <Field Name="MethodKeyword" Type="SyntaxToken" Optional="true">
      <Kind Name="MethodKeyword"/>
    </Field>
    <Field Name="Modifiers" Type="ModifierListSyntax" Optional="true" Override="true"/>
    <Field Name="Identifier" Type="SyntaxToken">
      <Kind Name="IdentifierToken"/>
    </Field>
    <Field Name="TypeParameterDeclarationList" Type="TypeParameterDeclarationListSyntax"/>
    <Field Name="ParameterDeclarationList" Type="ParameterDeclarationListSyntax"/>
    <Field Name="ColonToken" Type="SyntaxToken" Optional="true">
      <Kind Name="ColonToken" />
    </Field>
    <Field Name="Type" Type="TypeSyntax" Optional="true"/>
    <Field Name="ImplementsClause" Type="ImplementsClauseSyntax" Optional="true"/>
    <Field Name="AnnotatedWithClause" Type="AnnotatedWithClauseSyntax" Optional="true" Override="true"/>
    <Field Name="EndKeyword" Type="SyntaxToken">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="ParameterDeclarationSyntax" Base="DeclarationSyntax">
    <Kind Name="ParameterDeclaration"/>
    <Field Name="ParameterKeyword" Type="SyntaxToken" Optional="true">
      <Kind Name="ParameterKeyword"/>
    </Field>
    <Field Name="Modifiers" Type="ModifierListSyntax" Optional="true" Override="true"/>
    <Field Name="Identifier" Type="SyntaxToken">
      <Kind Name="IdentifierToken"/>
      <Kind Name="DotDotDotToken"/>
    </Field>
    <Field Name="ColonToken" Type="SyntaxToken" Optional="true">
      <Kind Name="ColonToken" />
    </Field>
    <Field Name="Type" Type="TypeSyntax" Optional="true"/>
    <Field Name="AnnotatedWithClause" Type="AnnotatedWithClauseSyntax" Optional="true" Override="true"/>
    <Field Name="EndKeyword" Type="SyntaxToken" Optional="true">
      <Kind Name="EndKeyword"/>
    </Field>
  </Node>
  <Node Name="ParameterDeclarationListSyntax" Base="LuaSyntaxNode">
    <Kind Name="ParameterDeclarationList"/>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="Parameters" Type="SeparatedSyntaxList&lt;ParameterDeclarationSyntax&gt;"/>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <Kind Name="CloseParenToken"/>
    </Field>
  </Node>
  <AbstractNode Name="FieldSyntax" Base="LuaSyntaxNode">
    <Field Name="FieldKey" Type="ExpressionSyntax" Optional="true"/>
    <Field Name="FieldValue" Type="ExpressionSyntax"/>
  </AbstractNode>
  <Node Name="ItemFieldSyntax" Base="FieldSyntax">
    <Kind Name="ItemField"/>
    <Field Name="FieldValue" Type="ExpressionSyntax" Override="true"/>
  </Node>
  <Node Name="NameValueFieldSyntax" Base="FieldSyntax">
    <Kind Name="NameValueField"/>
    <Field Name="FieldName" Type="IdentifierNameSyntax"/>
    <Field Name="EqualsToken" Type="SyntaxToken">
      <Kind Name="EqualsToken"/>
    </Field>
    <Field Name="FieldValue" Type="ExpressionSyntax" Override="true"/>
  </Node>
  <Node Name="KeyValueFieldSyntax" Base="FieldSyntax">
    <Kind Name="KeyValueField"/>
    <Field Name="OpenBracketToken" Type="SyntaxToken">
      <Kind Name="OpenBracketToken"/>
    </Field>
    <Field Name="FieldKey" Type="ExpressionSyntax" Override="true"/>
    <Field Name="CloseBracketToken" Type="SyntaxToken">
      <Kind Name="CloseBracketToken"/>
    </Field>
    <Field Name="EqualsToken" Type="SyntaxToken">
      <Kind Name="EqualsToken"/>
    </Field>
    <Field Name="FieldValue" Type="ExpressionSyntax" Override="true"/>
  </Node>
  <AbstractNode Name="InvocationArgumentsSyntax" Base="LuaSyntaxNode"/>
  <Node Name="ArgumentTableSyntax" Base="InvocationArgumentsSyntax">
    <Kind Name="ArgumentTable"/>
    <Field Name="Table" Type="TableConstructorExpressionSyntax"/>
  </Node>
  <Node Name="ArgumentListSyntax" Base="InvocationArgumentsSyntax">
    <Kind Name="ArgumentList"/>
    <Field Name="OpenParenToken" Type="SyntaxToken">
      <Kind Name="OpenParenToken"/>
    </Field>
    <Field Name="List" Type="SeparatedSyntaxList&lt;ArgumentSyntax&gt;"/>
    <Field Name="CloseParenToken" Type="SyntaxToken">
      <Kind Name="CloseParenToken"/>
    </Field>
  </Node>
  <Node Name="ArgumentStringSyntax" Base="InvocationArgumentsSyntax">
    <Kind Name="ArgumentString"/>
    <Field Name="String" Type="SyntaxToken">
      <Kind Name="StringLiteralToken"/>
      <Kind Name="MultiLineRawStringLiteralToken"/>
    </Field>
  </Node>
  <Node Name="ArgumentSyntax" Base="LuaSyntaxNode">
    <Kind Name="Argument"/>
    <Field Name="Expression" Type="ExpressionSyntax"/>
  </Node>
  <Node Name="NameAttributeListSyntax" Base="LuaSyntaxNode">
    <Kind Name="NameAttributeList"/>
    <Field Name="Identifier" Type="IdentifierNameSyntax"/>
    <Field Name="AttributeList" Type="VariableAttributeListSyntax" Optional="true"/>
  </Node>
  <Node Name="VariableAttributeListSyntax" Base="LuaSyntaxNode">
    <Kind Name="VariableAttributeList"/>
    <Field Name="LessThanToken" Type="SyntaxToken">
      <Kind Name="LessThanToken"/>
    </Field>
    <Field Name="Attributes" Type="SeparatedSyntaxList&lt;VariableAttributeSyntax&gt;" MinCount="1"/>
    <Field Name="GreaterThanToken" Type="SyntaxToken">
      <Kind Name="GreaterThanToken"/>
    </Field>
  </Node>
  <Node Name="VariableAttributeSyntax" Base="LuaSyntaxNode">
    <Kind Name="VariableAttribute"/>
    <Field Name="Token" Type="SyntaxToken">
      <Kind Name="CloseKeyword"/>
      <Kind Name="ConstKeyword"/>
    </Field>
  </Node>

</Tree>
