// Licensed to the Qtyi under one or more agreements.
// The Qtyi licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Xml.Linq;
using Luna.Compilers.Generators.Symbols.Model;
using Qtyi.CodeAnalysis;

namespace Luna.Compilers.Generators.Symbols;

internal class SymbolsSourceWriter : SymbolsFileWriter
{
    private SymbolsSourceWriter(TextWriter writer, SymbolTree tree, CancellationToken cancellationToken) : base(writer, tree, cancellationToken) { }

    public static void WriteInternal(TextWriter writer, SymbolTree tree, CancellationToken cancellationToken = default) => new SymbolsSourceWriter(writer, tree, cancellationToken).WriteInternal();

    public static void WritePublic(TextWriter writer, SymbolTree tree, CancellationToken cancellationToken = default) => new SymbolsSourceWriter(writer, tree, cancellationToken).WritePublic();

    private void WriteFileHeader()
    {
        WriteLine("// <auto-generated />");
        WriteLine();
        WriteLine("#nullable enable");
        WriteLine();
        WriteLine("using System;");
        WriteLine("using System.Collections.Generic;");
        WriteLine("using Microsoft.CodeAnalysis;");
        WriteLine("using Microsoft.CodeAnalysis.Symbols;");
        WriteLine($"using Qtyi.CodeAnalysis.{LanguageNames.This};");
        WriteLine($"using Qtyi.CodeAnalysis.{LanguageNames.This}.Symbols;");
        WriteLine("using Roslyn.Utilities;");
        WriteLine();
    }

    #region 内部源代码
    private void WriteInternal()
    {
        WriteFileHeader();
        WriteLine($"namespace Qtyi.CodeAnalysis.{LanguageNames.This}.Symbols");
        OpenBlock();
        this.WriteInternalSymbols();
        CloseBlock();

        WriteLine();
        WriteLine($"namespace Qtyi.CodeAnalysis.{LanguageNames.This}");
        OpenBlock();
        this.WriteInternalVisitors();
        CloseBlock();
    }

    private void WriteInternalSymbols()
    {
        var symbols = this.Tree.Types.Where(n => n is not PredefinedSymbol).ToList();
        foreach (var symbol in symbols)
        {
            WriteLine();
            this.WriteInternalSymbol(symbol);
        }
    }

    private void WriteInternalSymbol(SymbolTreeType symbol)
    {
        if (symbol is AbstractSymbol or Symbol)
        {
            WriteLine($"internal abstract partial class {symbol.Name} : {symbol.Base}");
            OpenBlock();

            this.WriteInternalAcceptMethods(symbol);

            CloseBlock();
        }
    }

    private void WriteInternalAcceptMethods(SymbolTreeType symbol)
    {
        if (symbol is AbstractSymbol) return;

        WriteLine();
        WriteLine($"public override void Accept({LanguageNames.This}SymbolVisitor visitor) => visitor.Visit{StripPost(symbol.Name, "Symbol")}(this);");
        WriteLine($"public override TResult? Accept<TResult>({LanguageNames.This}SymbolVisitor<TResult> visitor) where TResult : default => visitor.Visit{StripPost(symbol.Name, "Symbol")}(this);");
        WriteLine($"internal override TResult? Accept<TArgument, TResult>({LanguageNames.This}SymbolVisitor<TArgument, TResult> visitor, TArgument argument) where TResult : default => visitor.Visit{StripPost(symbol.Name, "Symbol")}(this, argument);");
    }

    private void WriteInternalVisitors()
    {
        this.WriteInternalVisitor(withResult: false);
        this.WriteInternalVisitor(withResult: true, withArgument: false);
        this.WriteInternalVisitor(withResult: true, withArgument: true);
    }

    private void WriteInternalVisitor(bool withResult, bool withArgument = false)
    {
        var symbols = Tree.Types.Where(n => n is not PredefinedSymbol).ToList();

        WriteLine();
        WriteLine($"partial class {LanguageNames.This}SymbolVisitor{(withResult ? (withArgument ? "<TArgument, TResult>" : "<TResult>") : "")}");
        OpenBlock();
        foreach (var symbol in symbols.OfType<Symbol>())
        {
            WriteLine($"public virtual {(withResult ? "TResult?" : "void")} Visit{StripPost(symbol.Name, "Symbol")}({symbol.Name} symbol{(withArgument ? ", TArgument argument" : "")}) => this.DefaultVisit(symbol{(withArgument ? ", argument" : "")});");
        }
        CloseBlock();
    }
    #endregion

    #region 公共源代码
    private void WritePublic()
    {
        WriteFileHeader();
        WriteLine($"namespace Qtyi.CodeAnalysis.{LanguageNames.This}.Symbols.PublicModel");
        OpenBlock();
        this.WritePublicSymbols();
        //this.WritePublicVisitors();
        CloseBlock();
    }

    private void WritePublicSymbols()
    {
        var symbols = this.Tree.Types.Where(n => n is not PredefinedSymbol).ToList();
        foreach (var symbol in symbols)
        {
            WriteLine();
            this.WritePublicSymbol(symbol);
        }
    }

    private void WritePublicSymbol(SymbolTreeType symbol)
    {
        if (symbol is AbstractSymbol)
        {
            WriteLine($"internal abstract partial class {symbol.Name} : {symbol.Base}");
        }
        else if (symbol is Symbol)
        {
            WriteLine($"internal sealed partial class {symbol.Name} : {symbol.Base}");
        }
        else return;
        OpenBlock();

        //this.WritePublicAcceptMethods(symbol);

        CloseBlock();
    }

    private void WritePublicAcceptMethods(SymbolTreeType symbol)
    {
        if (symbol is AbstractSymbol) return;

        WriteLine();
        WriteLine($"protected override void Accept(SymbolVisitor visitor) => visitor.Visit{StripPost(symbol.Name, "Symbol")}(this);");
        WriteLine($"protected override TResult Accept<TResult>(SymbolVisitor<TResult> visitor) => visitor.Visit{StripPost(symbol.Name, "Symbol")}(this);");
        WriteLine($"protected override TResult Accept<TArgument, TResult>(SymbolVisitor<TArgument, TResult> visitor, TArgument argument) => visitor.Visit{StripPost(symbol.Name, "Symbol")}(this, argument);");
    }

    private void WritePublicVisitors()
    {
        this.WritePublicVisitor(withResult: false);
        this.WritePublicVisitor(withResult: true, withArgument: false);
        this.WritePublicVisitor(withResult: true, withArgument: true);
    }

    private void WritePublicVisitor(bool withResult, bool withArgument = false)
    {
        var symbols = Tree.Types.Where(n => n is not PredefinedSymbol).ToList();

        WriteLine();
        WriteLine($"partial class {LanguageNames.This}SymbolVisitor{(withResult ? "<TResult>" : (withArgument ? "<TArgument, TResult>" : ""))} : SymbolVisitor{(withResult ? (withArgument ? "<TArgument, TResult>" : "<TResult>") : "")}");
        OpenBlock();
        foreach (var symbol in symbols.OfType<Symbol>())
        {
            WriteLine($"public sealed override {(withResult ? "TResult" : "void")} Visit{StripPost(symbol.Name, "Symbol")}(I{symbol.Name} symbol{(withArgument ? ", TArgument argument" : "")}) => symbol is {symbol.Name} {CamelCase(symbol.Name)} ? this.Visit{StripPost(symbol.Name, "Symbol")}({CamelCase(symbol.Name)}{(withArgument ? ", argument" : "")}) : this.DefaultVisit(symbol{(withArgument ? ", argument" : "")});");
            WriteLine($"public virtual {(withResult ? "TResult" : "void")} Visit{StripPost(symbol.Name, "Symbol")}({symbol.Name} symbol{(withArgument ? ", TArgument argument" : "")}) => this.DefaultVisit(symbol{(withArgument ? ", argument" : "")});");
        }
        CloseBlock();
    }
    #endregion
}
