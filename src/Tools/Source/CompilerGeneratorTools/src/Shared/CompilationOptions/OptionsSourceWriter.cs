// Licensed to the Qtyi under one or more agreements.
// The Qtyi licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Collections.Immutable;
using System.Diagnostics;
using Luna.Compilers.Generators.CompilationOptions.Model;
using Luna.Compilers.Generators.Model;
using Microsoft.CodeAnalysis;
using Roslyn.Utilities;
using LanguageNames = Qtyi.CodeAnalysis.LanguageNames;

namespace Luna.Compilers.Generators.CompilationOptions;

internal class OptionsSourceWriter : TreeFileWriter<OptionList, Option>
{
    protected Compilation Compilation { get; }

    public OptionsSourceWriter(TextWriter writer, OptionList tree, Compilation compilation, CancellationToken cancellationToken) : base(writer, tree, cancellationToken)
    {
        this.Compilation = compilation;
        this.BaseTypeOverrideInfo = GetBaseTypeOverrrideInfo(compilation);
    }

    public static void WriteMain(TextWriter writer, OptionList tree, Compilation compilation, CancellationToken cancellationToken = default) => new OptionsSourceWriter(writer, tree, compilation, cancellationToken).WriteMain();

    #region BaseTypeOverrideInfo
    protected readonly ImmutableDictionary<string, (IParameterSymbol ctorParam, IPropertySymbol prop, ImmutableArray<(IMethodSymbol method, IMethodSymbol commonMethod)> methodGroups)> BaseTypeOverrideInfo;

    private static ImmutableDictionary<string, (IParameterSymbol ctorParam, IPropertySymbol prop, ImmutableArray<(IMethodSymbol method, IMethodSymbol commonMethod)> methodGroups)> GetBaseTypeOverrrideInfo(Compilation compilation)
    {
        var dicBuilder = ImmutableDictionary.CreateBuilder<string, (IParameterSymbol ctorParam, IPropertySymbol prop, ImmutableArray<(IMethodSymbol method, IMethodSymbol commonMethod)> methodGroups)>(StringComparer.OrdinalIgnoreCase);

        var baseType = compilation.GetTypeByMetadataName(typeof(Microsoft.CodeAnalysis.CompilationOptions).FullName);
        Debug.Assert(baseType is not null);

        var constructor = baseType!.InstanceConstructors.SingleOrDefault(c => c.DeclaredAccessibility == Accessibility.Internal);
        Debug.Assert(constructor is not null);

        foreach (var param in constructor!.Parameters)
        {
            Debug.Assert(param.Name is not null);

            var prop = baseType.GetMembers().OfType<IPropertySymbol>().SingleOrDefault(p => !p.IsStatic && StringComparer.OrdinalIgnoreCase.Equals(p.Name, param.Name));
            Debug.Assert(prop is not null);

            if (prop!.Name is "WarningLevel" or "CurrentLocalTime" or "DebugPlusMode" or "ReferencesSupersedeLowerVersions")
            {
                dicBuilder.Add(prop.Name, (param, prop, default));
                continue;
            };

            var methodName = prop.Name == "CheckOverflow" ? "WithOverflowChecks" : "With" + prop.Name;
            var methods = baseType.GetMembers(methodName).OfType<IMethodSymbol>().Where(m => !m.IsStatic).ToImmutableArray();
            Debug.Assert(methods.Length != 0);

            var arrBuilder = ImmutableArray.CreateBuilder<(IMethodSymbol method, IMethodSymbol commonMethod)>();
            foreach (var method in methods)
            {
                Debug.Assert(method.Parameters.Length == 1);

                var commonMethodName = "CommonWith" + prop.Name;
                var commonMethod = baseType.GetMembers(commonMethodName).OfType<IMethodSymbol>().SingleOrDefault(m => !m.IsStatic && m.Parameters.Length == 1 && m.Parameters[0].Type.Equals(method.Parameters[0].Type));
                Debug.Assert(commonMethod is not null);

                arrBuilder.Add((method, commonMethod!));
            }
            dicBuilder.Add(prop.Name, (param, prop, arrBuilder.ToImmutable()));
        }

        return dicBuilder.ToImmutable();
    }
    #endregion

    private void WriteFileHeader()
    {
        WriteLine("// <auto-generated />");
        WriteLine();
        WriteLine("#nullable enable");
        WriteLine();
        WriteLine("using System;");
        WriteLine("using System.Collections.Generic;");
        WriteLine("using System.Collections.Immutable;");
        WriteLine("using Microsoft.CodeAnalysis;");
        WriteLine("using Microsoft.CodeAnalysis.PooledObjects;");
        WriteLine("using Roslyn.Utilities;");
        WriteLine();
    }

    private void WriteMain()
    {
        WriteFileHeader();
        WriteLine($"namespace Qtyi.CodeAnalysis.{LanguageNames.This}");
        OpenBlock();

        WriteLine($"partial class {LanguageNames.This}CompilationOptions");
        OpenBlock();

        this.WriteConstructors();
        this.WriteOptions();

        CloseBlock();

        CloseBlock();
    }

    private void WriteConstructors()
    {
        WriteInternalConstructor();
        WriteLine();
        WritePrivateConstructor();
    }

    private void WriteInternalConstructor()
    {
        WriteLine($"internal {LanguageNames.This}CompilationOptions(");
        Indent();
        var flag = false;
        foreach (var option in this.Tree.Options)
        {
            if (flag) WriteLine(",");
            else flag = true;

            if (this.BaseTypeOverrideInfo.TryGetValue(option.Base ?? option.Name, out var info))
            {
                var baseParam = info.ctorParam;
                Write(baseParam.Type.ToDisplayString((NullableFlowState)baseParam.Type.NullableAnnotation));
            }
            else
                Write("object?");
            Write(" ");
            Write(CamelCase(option.Name));
        }
        WriteLine(")");

        WriteLine(": base(");
        Indent();
        flag = false;
        foreach (var pair in this.BaseTypeOverrideInfo)
        {
            if (flag) WriteLine(",");
            else flag = true;

            var option = this.Tree.Options.SingleOrDefault(o => pair.Key == (o.Base ?? o.Name));
            Write($"{pair.Value.ctorParam.Name}: ");
            if (option is null)
                Write("default");
            else
                Write(CamelCase(option.Name));
        }
        WriteLine(")");
        Unindent();

        Unindent();
        OpenBlock();

        foreach (var option in this.Tree.Options)
        {
            if (!this.BaseTypeOverrideInfo.TryGetValue(option.Base ?? option.Name, out var _))
            {
                WriteLine($"this.{option.Name} = {CamelCase(option.Name)};");
            }
        }

        CloseBlock();
    }

    private void WritePrivateConstructor()
    {
        WriteLine($"private {LanguageNames.This}CompilationOptions({LanguageNames.This}CompilationOptions other) : this(");
        Indent();
        var flag = false;
        foreach (var option in this.Tree.Options)
        {
            if (flag) WriteLine(",");
            else flag = true;

            Write($"{CamelCase(option.Name)}: other.{option.Name}");
        }
        WriteLine(")");
        Unindent();

        OpenBlock();
        CloseBlock();
    }

    private void WriteOptions()
    {
        foreach (var option in this.Tree.Options)
        {
            WriteLine();
            if (this.BaseTypeOverrideInfo.TryGetValue(option.Base ?? option.Name, out var info))
            {
                if (option.Base is null || option.Base == option.Name)
                {
                    if (!info.methodGroups.IsDefaultOrEmpty)
                    {
                        foreach ((var method, var commonMethod) in info.methodGroups)
                        {
                            var paramNullableAnnotation = method.Parameters[0].NullableAnnotation;
                            var commonParamNullableAnnotation = commonMethod.Parameters[0].NullableAnnotation;
                            WriteWithMethod(option, info.prop.DeclaredAccessibility, info.prop.Type, info.prop.NullableAnnotation, method.Parameters[0].Type, (paramNullableAnnotation < commonParamNullableAnnotation ? commonParamNullableAnnotation : paramNullableAnnotation), isNew: true);
                            WriteCommonWithMethod(option, commonMethod.Parameters[0].Type, commonMethod.Parameters[0].NullableAnnotation);
                        }
                    }
                }
                else
                {
                    WriteProperty(option, info.prop);
                    if (!info.methodGroups.IsDefaultOrEmpty)
                    {
                        foreach ((var method, var commonMethod) in info.methodGroups)
                        {
                            var paramNullableAnnotation = method.Parameters[0].NullableAnnotation;
                            var commonParamNullableAnnotation = commonMethod.Parameters[0].NullableAnnotation;
                            WriteWithMethod(option, info.prop.DeclaredAccessibility, info.prop.Type, info.prop.NullableAnnotation, method.Parameters[0].Type, (paramNullableAnnotation < commonParamNullableAnnotation ? commonParamNullableAnnotation : paramNullableAnnotation), isNew: false);
                            WriteCommonWithMethod(option, commonMethod.Parameters[0].Type, commonMethod.Parameters[0].NullableAnnotation);
                        }
                    }
                }
            }
            else
            {
                WriteProperty(option);
                WriteWithMethods(option);
            }
        }

        foreach (var pair in this.BaseTypeOverrideInfo)
        {
            if (this.Tree.Options.Contains(o => (o.Base ?? o.Name) == pair.Key)) continue;

            var info = pair.Value;
            if (!info.methodGroups.IsDefaultOrEmpty)
            {
                foreach ((var _, var commonMethod) in info.methodGroups)
                {
                    WriteDefaultCommonWithMethod(commonMethod);
                }
            }
        }
    }

    private static string GetAccessibility(Accessibility accessibility) => accessibility switch
    {
        Accessibility.Public => "public",

        Accessibility.Internal or
        Accessibility.Friend => "internal",

        Accessibility.ProtectedOrInternal or
        Accessibility.ProtectedOrFriend => "protected internal",

        Accessibility.Protected => "protected",

        Accessibility.ProtectedAndInternal or
        Accessibility.ProtectedAndFriend => "private protected",

        Accessibility.Private => "private",

        _ => throw ExceptionUtilities.UnexpectedValue(accessibility)
    };

    private void WriteProperty(Option option)
    {
        WriteLine($"public object? {option.Name} {{ get; private set; }}");
    }

    private void WriteProperty(Option option, IPropertySymbol prop)
    {
        WriteLine($"{GetAccessibility(prop.DeclaredAccessibility)} {prop.Type.ToDisplayString((NullableFlowState)prop.NullableAnnotation)} {option.Name} {{ get => this.{option.Base ?? option.Name}; private set => this.{option.Base ?? option.Name} = value; }}");
    }

    private void WriteWithMethods(Option option)
    {
        WriteWithMethod(option, Accessibility.Public, this.Compilation.GetSpecialType(SpecialType.System_Object), NullableAnnotation.Annotated, this.Compilation.GetSpecialType(SpecialType.System_Object), NullableAnnotation.Annotated, isNew: false);
    }

    private void WriteWithMethod(Option option, Accessibility propAccessibility, ITypeSymbol propType, NullableAnnotation propNullableAnnotation, ITypeSymbol paramType, NullableAnnotation paramNullableAnnotation, bool isNew)
    {
        Write($"{GetAccessibility(propAccessibility)}{(isNew ? " new" : string.Empty)} {LanguageNames.This}CompilationOptions With{option.Name}({paramType.ToDisplayString((NullableFlowState)(propType.Equals(paramType) ? (paramNullableAnnotation < propNullableAnnotation ? propNullableAnnotation : paramNullableAnnotation) : paramNullableAnnotation))} value)");

        var immutableArrayType = this.Compilation.GetTypeByMetadataName(typeof(ImmutableArray<>).FullName)?.OriginalDefinition;
        Debug.Assert(immutableArrayType is not null);
        var immutableDictionaryType = this.Compilation.GetTypeByMetadataName(typeof(ImmutableDictionary<,>).FullName)?.OriginalDefinition;
        Debug.Assert(immutableDictionaryType is not null);
        var iEnumerableType = this.Compilation.GetSpecialType(SpecialType.System_Collections_Generic_IEnumerable_T);
        var keyValuePairType = this.Compilation.GetTypeByMetadataName(typeof(KeyValuePair<,>).FullName)?.OriginalDefinition;
        Debug.Assert(keyValuePairType is not null);
        var assemblyIdentityComparerType = this.Compilation.GetTypeByMetadataName(typeof(AssemblyIdentityComparer).FullName);
        Debug.Assert(assemblyIdentityComparerType is not null);
        if (!propType.Equals(paramType))
        {
            Write(" => ");
            if (propType.OriginalDefinition.Equals(immutableArrayType))
            {
                var propTypeInner = ((INamedTypeSymbol)propType).TypeArguments[0];
                var propTypeInnerNullableAnnotation = ((INamedTypeSymbol)propType).TypeArgumentNullableAnnotations[0];
                if (paramType is IArrayTypeSymbol)
                {
                    var paramTypeInner = ((IArrayTypeSymbol)paramType).ElementType;
                    var paramTypeInnerNullableAnnotation = ((IArrayTypeSymbol)paramType).ElementNullableAnnotation;
                    Debug.Assert(propTypeInner.Equals(paramTypeInner) && propTypeInnerNullableAnnotation == paramTypeInnerNullableAnnotation);

                    Write($"this.With{option.Name}((");
                    Write(iEnumerableType.Construct(ImmutableArray.Create(propTypeInner), ImmutableArray.Create(propTypeInnerNullableAnnotation)).ToDisplayString((NullableFlowState)paramNullableAnnotation));
                    WriteLine(")value);");

                    return;
                }
                else if (paramType.OriginalDefinition.Equals(iEnumerableType))
                {
                    var paramTypeInner = ((INamedTypeSymbol)paramType).TypeArguments[0];
                    var paramTypeInnerNullableAnnotation = ((INamedTypeSymbol)paramType).TypeArgumentNullableAnnotations[0];
                    Debug.Assert(propTypeInner.Equals(paramTypeInner) && propTypeInnerNullableAnnotation == paramTypeInnerNullableAnnotation);

                    Write($"new {LanguageNames.This}CompilationOptions(this) {{ {option.Name} = value.AsImmutableOrEmpty() }};");

                    return;
                }
            }
            else if (propType.OriginalDefinition.Equals(immutableDictionaryType))
            {
                var propTypeInners = ((INamedTypeSymbol)propType).TypeArguments;
                var propTypeInnerNullableAnnotations = ((INamedTypeSymbol)propType).TypeArgumentNullableAnnotations;
                if (paramType.OriginalDefinition.Equals(iEnumerableType))
                {
                    Debug.Assert(((INamedTypeSymbol)paramType).TypeArguments[0].OriginalDefinition.Equals(keyValuePairType));
                    var paramTypeInners = ((INamedTypeSymbol)((INamedTypeSymbol)paramType).TypeArguments[0]).TypeArguments;
                    var paramTypeInnerNullableAnnotations = ((INamedTypeSymbol)((INamedTypeSymbol)paramType).TypeArguments[0]).TypeArgumentNullableAnnotations;
                    Debug.Assert(propTypeInners.SequenceEqual(paramTypeInners) && propTypeInnerNullableAnnotations.SequenceEqual(paramTypeInnerNullableAnnotations));

                    Write($"new {LanguageNames.This}CompilationOptions(this) {{ {option.Name} = value.ToImmutableDictionaryOrEmpty() }};");

                    return;
                }
            }

            WriteLine($"this.With{option.Name}(value);");

            return;
        }
        else
        {
            WriteLine();
            OpenBlock();

            if (paramType.SpecialType == SpecialType.System_String)
            {
                WriteLine("if (string.IsNullOrEmpty(value))");
                OpenBlock();
                WriteLine("value = null;");
                CloseBlock();

                WriteLine();
            }
            else if (paramType.OriginalDefinition.Equals(immutableArrayType))
            {
                WriteLine("if (value.IsDefault)");
                OpenBlock();
                WriteLine($"value = {paramType.ToDisplayString(NullableFlowState.NotNull)}.Empty;");
                CloseBlock();

                WriteLine();
            }
            else if (paramType.OriginalDefinition.Equals(immutableDictionaryType))
            {
                WriteLine("if (value is null)");
                OpenBlock();
                WriteLine($"value = {paramType.ToDisplayString(NullableFlowState.NotNull)}.Empty;");
                CloseBlock();

                WriteLine();
            }
            else if (paramType.Equals(assemblyIdentityComparerType))
            {
                WriteLine($"value ??= {assemblyIdentityComparerType.ToDisplayString(NullableFlowState.NotNull)}.Default;");

                WriteLine();
            }

            Write("if (");
            if (paramType.SpecialType is SpecialType.System_Enum or
                (> SpecialType.System_Boolean and < SpecialType.System_UIntPtr) or
                SpecialType.System_Nullable_T or
                SpecialType.System_DateTime)
            {
                Write($"value == this.{option.Name}");
            }
            else if (paramType.OriginalDefinition.Equals(immutableArrayType) ||
                paramType.OriginalDefinition.Equals(immutableDictionaryType))
            {
                Write($"value == this.{option.Name}");
            }
            else if (paramType.IsValueType)
            {
                Write($"value == this.{option.Name}");
            }
            else
            {
                Write($"object.ReferenceEquals(value, this.{option.Name})");
            }
            WriteLine(")");
            OpenBlock();
            WriteLine("return this;");
            CloseBlock();

            WriteLine();

            WriteLine($"return new {LanguageNames.This}CompilationOptions(this) {{ {option.Name} = value }};");

            CloseBlock();
        }
    }

    private void WriteCommonWithMethod(Option option, ITypeSymbol type, NullableAnnotation nullableAnnotation)
    {
        WriteLine($"protected override CompilationOptions CommonWith{option.Base ?? option.Name}({type.ToDisplayString((NullableFlowState)nullableAnnotation)} {CamelCase(option.Base ?? option.Name)}) => this.With{option.Name}({CamelCase(option.Base ?? option.Name)});");
    }

    private void WriteDefaultCommonWithMethod(IMethodSymbol method)
    {
        var param = method.Parameters[0];
        WriteLine($"{GetAccessibility(method.DeclaredAccessibility)} override CompilationOptions {method.Name}({param.Type.ToDisplayString((NullableFlowState)param.NullableAnnotation)} {param.Name}) => this;");
    }
}
