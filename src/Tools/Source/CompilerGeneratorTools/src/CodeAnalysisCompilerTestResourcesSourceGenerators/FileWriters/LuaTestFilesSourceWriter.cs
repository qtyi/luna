// Licensed to the Qtyi under one or more agreements.
// The Qtyi licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Collections.Immutable;
using Luna.Compilers.Generators.CSharp;

namespace Luna.Compilers.Generators;

internal sealed class LuaTestFilesSourceWriter : IndentWriter
{
    private readonly ImmutableArray<string> _fileNames;

    public LuaTestFilesSourceWriter(TextWriter writer, ImmutableArray<string> fileNames, CancellationToken cancellationToken) : base(writer, cancellationToken)
    {
        this._fileNames = fileNames;
    }

    public static void WriteSource(TextWriter writer, ImmutableArray<string> fileNames, CancellationToken cancellationToken) => new LuaTestFilesSourceWriter(writer, fileNames, cancellationToken).WriteSource();

    private void WriteSource()
    {
        this.WriteLine("// <auto-generated />");
        this.WriteLine();
        this.WriteLine("#nullable enable");
        this.WriteLine();
        this.WriteLine("using System.Collections.Generic;");
        this.WriteLine();
        this.WriteLine("namespace TestResources;");
        this.WriteLine();
        this.WriteLine("public static class LuaTestFiles");
        this.OpenBlock();

        this.WriteProperties();
        this.WriteLine();
        this.WriteMethod();

        this.CloseBlock();
    }

    private void WriteProperties()
    {
        var flag = true;
        foreach (var fileName in this._fileNames)
        {
            if (flag) flag = false;
            else this.WriteLine();

            var name = Path.GetFileNameWithoutExtension(fileName);
            var staticFieldName = "s_" + CamelCase(name);
            var propertyName = PascalCase(name);
            this.WriteLine($"private static string {staticFieldName};");
            this.WriteLine($"public static string {propertyName} => ResourceLoader.GetOrCreateResource(ref {staticFieldName}, \"LuaTestFiles.{fileName}\");");
        }
    }

    private void WriteMethod()
    {
        this.WriteLine("public static IEnumerable<(string name, string source)> GetAllFiles()");
        this.OpenBlock();

        foreach (var fileName in this._fileNames)
        {
            var name = Path.GetFileNameWithoutExtension(fileName);
            var propertyName = PascalCase(name);
            this.WriteLine($"yield return (\"{fileName}\", {propertyName});");
        }

        this.CloseBlock();
    }
}
