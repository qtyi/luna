// Licensed to the Qtyi under one or more agreements.
// The Qtyi licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Collections.Immutable;
using System.Diagnostics;
using System.Security.Cryptography;
using Luna.Compilers.Generators.CSharp;

namespace Luna.Compilers.Generators;

internal sealed class MoonScriptTestFilesSourceWriter : IndentWriter
{
    private readonly ImmutableArray<(string input, string output)> _fileNames;

    public MoonScriptTestFilesSourceWriter(TextWriter writer, ImmutableArray<string> fileNames, CancellationToken cancellationToken) : base(writer, cancellationToken)
    {
        var moonScriptFileNames = fileNames.Where(static fileName => string.Equals(Path.GetExtension(fileName), ".moon", StringComparison.OrdinalIgnoreCase));
        var luaFileNames = fileNames.Where(static fileName => string.Equals(Path.GetExtension(fileName), ".lua", StringComparison.OrdinalIgnoreCase));

        this._fileNames = 
            (from moonScriptFileName in moonScriptFileNames
             join luaFileName in luaFileNames
             on Path.GetFileNameWithoutExtension(moonScriptFileName).ToLowerInvariant() equals Path.GetFileNameWithoutExtension(luaFileName).ToLowerInvariant()
             select (moonScriptFileName, luaFileName))
             .ToImmutableArray();
        Debug.Assert(this._fileNames.Length * 2 == fileNames.Length);
    }

    public static void WriteSource(TextWriter writer, ImmutableArray<string> fileNames, CancellationToken cancellationToken) => new MoonScriptTestFilesSourceWriter(writer, fileNames, cancellationToken).WriteSource();

    private void WriteSource()
    {
        this.WriteLine("// <auto-generated />");
        this.WriteLine();
        this.WriteLine("#nullable enable");
        this.WriteLine();
        this.WriteLine("using System.Collections.Generic;");
        this.WriteLine();
        this.WriteLine("namespace TestResources;");
        this.WriteLine();
        this.WriteLine("public static class MoonScriptTestFiles");
        this.OpenBlock();

        this.WriteProperties();
        this.WriteLine();
        this.WriteMethod();

        this.CloseBlock();
    }

    private void WriteProperties()
    {
        var flag = true;
        foreach ((var input, var output) in this._fileNames)
        {
            if (flag) flag = false;
            else this.WriteLine();

            this.WriteProperty(input, input: true);
            this.WriteLine();
            this.WriteProperty(output, input: false);
        }
    }

    private void WriteProperty(string fileName, bool input)
    {
        var name = Path.GetFileNameWithoutExtension(fileName);
        var staticFieldName = "s_" + (input ? "input" : "output") + "_" + CamelCase(name);
        var propertyName = (input ? "Input" : "Output") + "_" + PascalCase(name);
        this.WriteLine($"private static string {staticFieldName};");
        this.WriteLine($"public static string {propertyName} => ResourceLoader.GetOrCreateResource(ref {staticFieldName}, \"MoonScriptTestFiles.{fileName}\");");
    }

    private void WriteMethod()
    {
        this.WriteLine("public static IEnumerable<(string inputName, string inputSource, string outputName, string outputSource)> GetAllFiles()");
        this.OpenBlock();

        foreach ((var input, var output) in this._fileNames)
        {
            var inputName = Path.GetFileNameWithoutExtension(input);
            var inputPropertyName = "Input_" + PascalCase(inputName);
            var outputName = Path.GetFileNameWithoutExtension(output);
            var outputPropertyName = "Output_" + PascalCase(outputName);
            this.WriteLine($"yield return (\"{input}\", {inputPropertyName}, \"{output}\", {outputPropertyName});");
        }

        this.CloseBlock();
    }
}
