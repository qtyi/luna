// Licensed to the Qtyi under one or more agreements.
// The Qtyi licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Collections.Immutable;
using System.Diagnostics;

namespace Luna.Tools;

internal sealed class MoonScriptTestFilesSourceWriter : IndentWriter
{
    private readonly ImmutableArray<(string input, string output)> _fileNames;

    public MoonScriptTestFilesSourceWriter(TextWriter writer, TestFilesSourceProductionContext context) : base(writer)
    {
        var moonScriptFileNames = context.FileNames.Where(static fileName => string.Equals(Path.GetExtension(fileName), ".moon", StringComparison.OrdinalIgnoreCase));
        var luaFileNames = context.FileNames.Where(static fileName => string.Equals(Path.GetExtension(fileName), ".lua", StringComparison.OrdinalIgnoreCase));

        _fileNames = 
            (from moonScriptFileName in moonScriptFileNames
             join luaFileName in luaFileNames
             on Path.GetFileNameWithoutExtension(moonScriptFileName).ToLowerInvariant() equals Path.GetFileNameWithoutExtension(luaFileName).ToLowerInvariant()
             select (moonScriptFileName, luaFileName))
             .ToImmutableArray();
        Debug.Assert(_fileNames.Length * 2 == context.FileNames.Length);
    }

    public static void WriteSource(TextWriter writer, TestFilesSourceProductionContext context) => new MoonScriptTestFilesSourceWriter(writer, context).WriteSource();

    private void WriteSource()
    {
        WriteLine("// <auto-generated />");
        WriteLine();
        WriteLine("#nullable enable");
        WriteLine();
        WriteLine("using System.Collections.Generic;");
        WriteLine("using System.IO;");
        WriteLine();
        WriteLine("namespace TestResources;");
        WriteLine();
        WriteLine("public static class MoonScriptTestFiles");
        this.OpenBlock();

        WriteMethods();

        this.CloseBlock();
    }

    private void WriteMethods()
    {
        WriteLine("public static IEnumerable<string> GetAllInputFileNames()");
        this.OpenBlock();

        foreach ((var input, var _) in _fileNames)
        {
            WriteLine($"yield return \"{input}\";");
        }

        this.CloseBlock();

        WriteLine();

        WriteLine("public static string GetOutputFileName(string name) => name switch");

        this.OpenBlock();

        foreach ((var input, var output) in _fileNames)
        {
            WriteLine("\"{0}\" => \"{1}\",", input, output);
        }

        this.CloseBlock(';');

        WriteLine();

        WriteLine("public static string GetSource(string name) => ResourceLoader.GetResource($\"MoonScriptTestFiles.{name}\");");
    }
}
