// Licensed to the Qtyi under one or more agreements.
// The Qtyi licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Collections.Immutable;
using Roslyn.Utilities;

namespace Luna.Compilers.Generators.ErrorFacts;

internal sealed class ErrorFactsSourceWriter : IndentWriter
{
    public ErrorFactsSourceProductionContext Context { get; init; }

    public ErrorFactsSourceWriter(TextWriter writer, ErrorFactsSourceProductionContext context)
        : base(writer)
    {
        Context = context;
    }

    public static void WriteMain(TextWriter writer, ErrorFactsSourceProductionContext context) => new ErrorFactsSourceWriter(writer, context).WriteMain();

    private void WriteFileHeader()
    {
        this.WriteLine("// <auto-generated />");
        this.WriteLine();
        this.WriteLine("#nullable enable");
        this.WriteLine();
    }

    private void WriteMain()
    {
        this.WriteFileHeader();
        this.WriteLine($"namespace Qtyi.CodeAnalysis.{Context.ThisLanguageName}");
        this.OpenBlock();

        this.WriteLine("partial class ErrorFacts");
        this.OpenBlock();

        bool first = true;
        foreach ((var category, var codeNames) in Context.CategorizedErrorCodeNames)
        {
            if (first)
                first = false;
            else
                this.WriteLine();

            this.WriteCategory(category, codeNames);
        }

        this.CloseBlock();

        this.CloseBlock();
    }

    private void WriteCategory(string category, ImmutableArray<string> codeNames)
    {
        this.WriteLine($"public static bool Is{category}(ErrorCode code)");
        this.OpenBlock();

        this.WriteLine("switch (code)");
        this.OpenBlock();

        if (codeNames.Length != 0)
        {
            foreach (var name in codeNames)
            {
                this.Write("case ErrorCode.");
                this.Write(name);
                this.WriteLine(":");
            }
            this.Indent();
            this.WriteLine("return true;");
            this.Unindent();
        }
        this.WriteLine("default:");
        this.Indent();
        this.WriteLine("return false;");
        this.Unindent();

        this.CloseBlock();

        this.CloseBlock();
    }
}
